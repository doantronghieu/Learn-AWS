So now let's talk about CORS.

CORS is Cross-Origin Resource Sharing.

And this is something you need to know

at the exam for one question.

Now, I'm gonna go in depth to how that works

and that will make answering that question very easy.

So, the origin is a scheme, a protocol

a host, a domain, and a port.

For example, if you look at https://www.example.com

the implied port is 443 for HTTPS,

the protocol is HTTPS itself

and the domain of course is www.example.com

Now, CORS is a web browser based mechanism of security

to allow or to deny request

to other origins while visiting the main origin.

So, let's have a look at what the same origin means.

So, it's the same origin if we have the same scheme,

the same host and the same port.

For example, we have these two URLs,

they're share the same origin.

But, we can have different origins.

For example, www.example.com and other.example.com

And so, if our web browser is visiting one website

and supposed to make a request

to another website as part of the request scheme

then these requests will not be fulfilled

unless the other origin allows

for the request using the CORS header.

They're called the Access-Control-Allow-Origin headers.

So, let's go through a diagram to understand how that works

and how they can be leveraged.

So, we have a web server and that's your origin

and it's https://www.example.com and a web browser.

And the second web server, which is the cross-origin, okay?

So, www.other.com

Now, the web browser is going to do an HTTPS request

into the first origin web server.

And as part of the result

the index that HTML file retrieved is gonna say,

Hey, you must also get some images, for example,

from this other web server.

So, the web browser has a security built in,

and first is going to do a pre-flight request

to the cross-origin.

So, it's gonna say, Hey, I wanna get the options

for www.other.com

And, by the way, my origin where the request is coming from

is the https://www.example.com.

And then the web server, if it's considered

and configured to use the Cross-Origin Resource Sharing

is going to say, Yes, I do allow this origin,

the example.com origin, for the get, put and delete methods.

So, this is what we call the CORS headers.

And, if the web browser is happy with this CORS

headers, then the web browser is going

to make a request to the other server

to retrieve these files

and make these calls.

So, how does it apply to Amazon S3?

Well, if a client makes a cross-origin request

on our S3 buckets,

we need to enable the correct CORS headers.

It's a very popular exam question,

and one way to do it very quickly is to allow

for a specific origin or to allow for*,

that means all origins.

So, let's have a look.

We have a web browser and we have an S3 bucket,

which has a static website being enabled.

So, that's my bucket HTML.

And we are storing our assets, our images

in another S3 bucket called my-buckets-assets.

And again, we have enabled a static website for it.

So, the web browser goes to the first S3 bucket

and say, Hey, I want to get the index,

that HTML file, for this URL right here

which is, of course, the static website URL.

So, we get back the index.html

and within the index.html there is an image

and that image lives on another website.

So, we get the images/coffee

this is the web browser doing its thing,

but this time it's saying, Hey

the target host is this other website,

but the origin is this first website.

And if the S3 bucket is not configured

to have the correct CORS headers

it's going to refuse the request,

or else if it's allowing this request,

then it's going to have the correct headers

and say, Okay, you can do this request

and you can get the image.

So remember, CORS is a web browser security that allows you

to enable images or assets or files being retrieved

from one S3 bucket in case the request is originating

from another origin.

So, that's it.

I hope you liked it, and I will see you in the next lecture

for some hands on

to show you exactly how CORS works.

So let's practice using CORS.

And for this we first must change the index.html files.

So if you open it,

you will find that this part has been commented out

and this part is to demo CORS.

Okay, so the way to just make it work

is that you first go to line 13

and you remove the first characters before the div.

And after script,

you remove as well the dash, dash and arrow.

So this is going to enable CORS.

And what's going to happen is that

my first webpage is now gonna say

Hello world I love coffee

and show the coffee image.

But after this, we're going to have a script

that is going to fetch an extra page,

an extra HTML page, okay?

And then displays underneath.

And this extra HTML page right here is saying

this extra page has been successfully loaded.

So let's go into our buckets

and we're going to upload two files.

So we have the extra-page.html and the index.html.

So we're going to do

is that we're going to upload these two files now,

because this is successful.

And if I go into my Properties

and look for my endpoints right here,

I can click on this to open in a new tab.

And we have I love coffee, Hello world! The coffee image.

And then this extra page has been successfully loaded.

So that means that the fetch request worked

from within the same origin

because, well, both my extra page

and my index.html files are on the same bucket.

So now let's demonstrate CORS.

And to do this,

I must first create another extra extra bucket

and enable it as a website.

So let's create a bucket and call it

demo-other-origin-stephane.

And I will choose it to be in another region, for example,

to demonstrate that there are very different servers.

For example, I will put this one in Canada.

Okay, so I'll scroll down.

I will unblock all public access

because we will make this public.

And then I will scroll down, create this bucket.

Now I go into the bucket itself.

And then under Properties I will scroll down

and make sure that we have enabled this as a website.

So yes, this is a website

and I wanna host a static website.

And then we'll say index.html,

even though we don't have one,

this will be enough for the index documents.

Okay, so this is good.

Next, we need to make this bucket public.

So let's go into Permissions.

And then for the bucket policy, let's edit it, okay.

And to make it simple,

I'm going to just copy the one I had from before.

So this one is going to be copied here and pasted,

and I will just swap out the buckets ARN,

right here under the resource.

So this is effectively going to make

these buckets public as well.

So let's save these changes.

And we have an unexpected response

because we just removed the first character.

Save the changes. Perfect.

Back in here, we are going to now upload,

in my other-origin, we're going to upload a file.

So we're going to upload this extra-page.html.

Upload it, and we're good.

So this file should now be a public file

on my buckets enabled as a website.

So if I click on this, this Object URL right here,

as we can see the extra page has been loaded

and the file is public.

So now what we have

is that we have the origin buckets in here

and we can remove this extra-page.html

because we don't need this one right now

because we have placed it in another bucket.

And then we're going to have to change the index.html file

to point instead to the extra page in my other origin.

So first, let's go to this page,

and I'm going to refresh this.

And I get a "404 Not Found" because, well,

we cannot find the extra-page.html.

So this is perfect.

Right now we shows that we have something to fix.

So let's close this.

Let's go to this demo-origin-stephane, other-origin.

Let's go to the properties, find the public URL, this one.

So let's open this as an STS website,

/extra-page.html.

So perfect, we have this extra page, this puzzle website.

And we'll use this entire URL and change our index.html.

And this time to fetch, we're going to fetch not this

but the full path to my extra-page.html on another bucket.

And this is going to trigger

across origin resource share request.

So now I need to re-upload this index.html file

where I need to.

So let's upload it here on the main buckets,

the first one.

Perfect. And let's override it.

Okay, so now my file is uploaded.

So let's go onto my first webpage right now.

And it's using the new index.html.

And I'm going to first open, under More tools,

I'm going to open the web developer tools.

This is something also called the Chrome Developer Tools.

And I'm going to refresh this page

to see if we have an error.

So let's refresh this page.

As you can see now, we don't have any error message here,

but in my console log debugger,

we have something that is written very, very small

and may be aware.

But it says cross-origin request blocked

because the policy does not allow this.

There's a CORS header called

the Access-Control-Allow that is missing.

And so therefore, currently,

because my request is going onto this other bucket,

but this other bucket is not set up for CORS yet,

then this request is failing.

And the web browser is saying

that the cross-origin request has been blocked.

So let's fix this by adding the CORS setting.

So let's go here under my other origin, okay,

and you go under Permissions, scroll down,

and we have the CORS setting here that we define in JSON.

So let's edit this.

And we need to add the correct CORS setting.

So thankfully I have them here.

So you just copy this block of code and you paste it here.

And here, the AllowedOrigins we need to define

are going to be a URL of the first bucket with http

without a slash at the end.

So fair lazy.

Let's go to my first web page.

We copy this entirely,

we paste it here,

and if there's a slash at the end like right now,

just remove it.

And then you're going to save these CORS settings.

So now we're saying to this other origin that's, yes

it's okay to make requests from the first origin.

So how do we know that it's going to work?

Well, let's refresh this page now.

As we can see now,

this extra pet has been successfully loaded,

and that's correct.

And we can also have a look at this

by going into the networking tab.

And if you look at the request that was made

on the extra page, and we look at the response headers,

we can see right here, again, it's very small,

but we can see that there is

Access-Control-Allow-Methods GET,

Access-Control-Allow-Origin,

and this is the origin of my first buckets.

So these are the headers

that allow this cross origin request to be made.

Now, I know that what we've seen right now

may be a bit advanced, of course,

but this CORS settings just come up at the exam

at a high level.

Did you know what it is?

But I wanted to show you exactly how it worked

so that it becomes very easy

for you to answer this one question.

Okay, that's it for this lecture.

I hope you liked it, and I will see you in the next lecture.