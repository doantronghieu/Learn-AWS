So now let's talk about

CloudFormation parameters in detail.

So parameters are a way for you to provide inputs

into your CloudFormation templates.

So you have a CloudFormation template

and you want your user to provide parameter values,

and these parameters are defined

as part of the CloudFormation templates.

We actually used them before

when we were giving a security group a description.

So, they're super important to know about

if you want to reuse your templates across the company

so that many people can put many parameters

and because the inputs cannot be determined ahead of time.

So the parameters are extremely powerful,

they're controlled, and they also can prevent errors

from happening in your templates thanks to the types,

and we'll have a look at those in a second.

So when should you use a parameter?

So this is the SecurityGroupDescription parameter

we have used from before,

and the question you need to ask yourself

when defining if something should

or shouldn't be a parameter is this.

Is this CloudFormation resource configuration

likely to change in the future?

If so, make it a parameter,

because whenever you want to update that value,

you will not have to re-upload the template

to change its contents.

Also, if it cannot be determined ahead of time,

then again, you should make it a parameter.

So the parameters have multiple settings

and the first one is Type.

It could be a String, a Number, a CommaDelimitedList,

a List of numbers.

It could be an AWS-Specific Parameter,

for example, to help you catch invalid values

or a list of those.

It could be an SSM Parameter.

It could also have a Description.

It could have a DonstraintDescription

if you have a constraint.

It could have a Min and a MaxLength,

a Min and a Max Vlue, a Default value,

a list of AllowedValues,

regex of an AllowedPattern and NoEcho,

and it could have other things

maybe not represented in this slide.

So you don't have to remember all of those,

but what you need remember

is that the parameters are not just strings.

You can have constraints and validation,

allowing you to make sure they are safe to use.

So I want to give you two important examples

going into the exam.

The first one is AllowedValues.

So here is an example.

We have a parameter called InstanceType.

To choose an EC2 InstanceType of Type: String.

But we have defined AllowedValues being t2.micro,

t2.small, or t2.medium

with a Default being t2.micro.

And this parameter is reused in the EC2Instance.

So thanks to it, we'll have a dropdown

and the user can only select one of these three values,

hence giving them choice while giving you control.

Then we have NoEcho.

So for example, say we want as a parameter

to put in the database password,

but of course it is a password

so we have to keep it secret.

So we want to remove it from the logs and so on.

So we'll have NoEcho: true

so that the password is not displayed anywhere.

Now, how do we actually use these parameters?

So it is this little !Ref function you've seen before.

Maybe if you had to look at the CloudFormation templates.

So this function !Ref can be leveraged

to reference parameters,

and these parameters can be used then

anywhere in the templates.

So you've seen I wrote Fn::Ref,

but actually there's a shorthand version in YAML

called the !Ref.

So it's easier to use and easier to read.

And so this function allows you to reference parameters,

but also reference other elements within the template.

So let's have a look at the templates

we have to see how this was being used.

So here I am in my template,

and as you can see, one parameter was being defined.

We named it.

We had the description, Security Group Description,

and a Type: String.

So it was a very simple parameter.

We did not have any types of constraint on it.

Now, this SecurityGroupDescription

is representing the description of a security group

and therefore we're going to find its usage

by scrolling down.

And in here for our second EC2 SecurityGroup,

under properties GroupDescription, we have a !Ref.

So here the !Ref function,

pointing to SecurityGroupDescription,

which is the exact same name here

as the name of our parameter above.

So this is the usage of the !Ref function

and how to reference a parameter

within your CloudFormation templates.

But on top of it, this !Ref function

is used in other places.

For example, under the SecurityGroups property

of our EC2::Instance we had a !Ref for SSHSecurityGroup.

And this SSHSecurityGroup

is the exact name as the resource SSHSecurityGroup

defined in our template.

So here we have used the !Ref function

to reference a resource and not a parameter.

So they're used the same way.

And that's why you need to make sure

that your resources don't have the same name

as your parameters.

So here we have the !Ref to SSHSecurityGroup.

We have a !Ref to ServiceSecurityGroup.

And then for the elastic IP we have a reference

to MyInstance, which was defined right above.

Now that we've had a look at parameters in depth,

let's look at pseudo parameters.

So AWS is offering us pseudo parameters

in any CloudFormation templates.

And these are things that are already existing

even if you don't create them,

and they can be used at any time and are enabled by default.

So I'm giving you a list of important ones, not all of them,

but so you can understand.

So for example, if you use a !Ref

to the AWS AccountID reference value,

then the return value will be your actual account ID.

So from your CloudFormation template, it is possible

to figure out automatically your account ID.

Or the AWS region you are in, or the stack ID

or the stack name or notifications ARN

or just no value too.

You don't get any kind of value.

So these pseudo parameters are very handy

and I think one of the most used is, for example,

to figure out the region and the account ID.

So you don't need the user to actually tell

your CloudFormation templates that they are in us-east-1.

The template knows itself that it is in us-east-1

thanks to pseudo parameters.

Okay, so that's it for this lecture.

