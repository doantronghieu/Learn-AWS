So let's talk about

CloudFormation- DeletionPolicy.

DeletionPolicy is a setting you can apply

to resources on your CloudFormation templates,

which allows you to control what happens

to a resource when the resource is removed

from your CloudFormation templates

or when the CloudFormation stack is deleted.

It's a way for you to actually preserve

and backup up resources.

So by default, we've seen

that when we delete a CloudFormation template,

all the resources within are also deleted.

That means that the default DeletionPolicy is delete,

so you don't have to specify it because it is the default.

Sometimes you wanna specify to be really explicit

that things are being deleted, but so here's an example.

We have an EC2 instance,

and as you can see, DeletionPolicy is delete.

So that means that the EC2 instance will be deleted

whenever the CloudFormation stack is deleted.

Okay. Here is another example.

We have an S3 buckets

and we have DeletionPolicy=Delete.

So everything probably should be working fine,

but actually if you have an S3 bucket, this is an exception,

and you have DeletionPolicy=Delete on it.

It will work only if the S3 bucket is empty.

If it's not empty, then the delete will fail.

So the way to fix this if you wanted to would be

to either manually delete everything within the S3 bucket

and then continue with the deletion

of your CloudFormation templates.

Or it would be for you to implement a custom resource

to actually delete everything within the S3 bucket

before automatically having the S3 bucket go away.

Now let's talk about DeletionPolicy retain.

So for the retain DeletionPolicy,

it's actually specifying which resources you want

to preserve in your CloudFormation templates.

So example here, we have a DynamoDB table,

and we know that by default, it would be deleted

when I delete my CloudFormation template,

but maybe we actually wanna keep it, keep the data within

because we care about the data of this table.

And so we would specify at the bottom

DeletionPolicy retain.

And so even if I delete my CloudFormation templates,

this DynamoDB table would stay,

and this works with any resources.

Finally, the last DeletionPolicy you need

to know about is snapshots.

So this is to create one final snapshot

before deleting the resource.

And it's supported by EBS volumes,

ElastiCache Cluster, ElastiCache ReplicationGroup,

RDS DBInstance, DB cluster, Redshift, Neptune,

DocumentDB, and maybe more.

And the idea is that you would specify at the bottom,

of course, a DeletionPolicy snapshot.

And so that instance of database from RDS would be deleted,

but a last snapshot would be taken

before that instance is gone.

And so that's very helpful for backups and safety purposes.

So, let's have a look.

And in this file deletionpolicy.yaml,

there is a security group

and the DeletionPolicy is retained.

So that means that if I delete my transformation stack,

this security group should stay.

And there is an EBS volume,

and the DeletionPolicy is a snapshot.

So that means that upon deleting the stack,

the volume should go away,

but a snapshot should be created first.

So let's verify this behavior by creating a stack

and uploading the template file being DeletionPolicy.

Next, DeletionPolicyDemo is the name of my stack.

Scroll down next and submit.

So this goes ahead

and creates very quickly my CloudFormation stack,

which is going to be made again of two resources.

We have an EBS volume,

and then we have an EC2 security group.

So now they're both created

and my stack has been fully created.

Now let's go ahead and try to delete it.

So let's delete the stack and let's look at the events.

So we see here that the My Security group

has a delete skipped.

This is because we did specify

a DeletionPolicy of retain.

So if I wanted to get rid of this security group,

as you can see, it is still here.

If I wanted to get rid of it, I would need

to manually delete it

because I told CloudFormation not to delete it.

Now, regarding the EBS volume, it has been deleted.

But if I go into the events, it turns out that

a snapshot has been created and it was successful.

And here is the snapshot ID.

Therefore, if I go into

my snapshots on the left-hand side, I have a new snapshot

of one gigabytes that was just created right now

from my EBS volume,

but my EBS volume, as you can see, is gone.

So if you wanted to fully clean up, please make sure

to also delete this snapshot manually.

And please make sure to also delete

the security group if you wanted to.

But that's it.

We've seen the power of the DeletionPolicy.

I hope you liked it, and I will see you in the next lecture.