# CloudFormation - Create Stack - Hands On.


So let's go ahead and practice

using CloudFormation.

So very important, first thing you need to do is

to select the US East, Northern Virginia,

US East one region,

and the reason I want you to be in US East one

is that all the templates have been designed

for that region,

especially when talking about AMI IDs,

which are region specific.

So just for the sake of learning,

please use Northern Virginia, US East one.

Okay, so next, let's first have a look at CloudFormation.

So this is a service.

As you can see, I currently have zero stacks.

You may have some stacks if you already use Beanstalk

or stuff like this,

but it doesn't matter if you have zero or more.

So let's go ahead and create a stack,

and we have several options.

So first I wanna show you what CloudFormation is.

So you're going to click on Use a sample template,

and then within sample templates choose, for example,

Multi_AZ_Simple.

It doesn't really matter what you choose,

just choose one of them

and then click on View in Designer.

So the reason why I'm making you open a template in Designer

is so you can see exactly what the template is made of,

and what the architecture is.

So here as we can see, we have a template at the bottom,

and we can choose a template language.

So we have JSON or YAML.

I prefer YAML for readability.

So here is your template.

And as you can see, it's a big one.

We'll learn how to read and how to use those,

and how to write those later on,

but currently too big for us to have a look at it.

And then, it's made of components.

And we have several sections that I discussed before.

We have parameters, mappings, conditions,

metadata, and output.

And again, we'll have a look at those

in greater details later on.

But this entire file, this entire template

is being converted into resources.

And as you can see from within the CloudFormation Designer,

you can have a look at what these resources are.

So we have security groups,

we have an RDS database instance, we have a load balancer,

we have an auto scaling group, and so on.

So all of this is defined only through code as a YAML file.

And this is the power of CloudFormation.

And if I were to launch that template,

then, of course, it would create all these resources,

but right now click on Close and leave page.

So we're not going to deploy that template,

because it would be useless and it would cost us some money.

Instead, we're going to create a stack,

and this time we're going to use

the code that I've provided.

So first, let's have a look at the files we have.

So within your code, go to CloudFormation,

and you will find 0-just-ec2.yaml.

And open this file,

and this is our first yaml file.

So let's have a look at what it does.

So we have resources,

and this is the mandatory thing

that you need to have in your CloudFormation templates.

And then you have a name

of your first CloudFormation resource named MyInstance.

The type of MyInstance is AWS, EC2 instance.

This right here, and by the way,

all the popups you see is just made of VS code

and the CloudFormation plugin for VS code.

But don't worry if you don't have it.

So the type is EC2 instance, and then we have properties.

And so we're saying, hey, please create an EC2 instance.

And the first thing is that

the availability zone must be US East 1a.

The image id, the AMI ID, should be this ami.

And the instance type should be t2.micro.

And these three parameters are enough for us to start using

and creating an EC2 instance,

in which we have specified a few parameters.

So as you can see, nothing has been decided

and defined in the console, only through code.

So let's upload a template file

and let's choose 0-just-ec2.yaml,

and we're going to name it

EC2InstanceDemo,

and next..

And right now we have no tags, no permissions,

we are not going to look at these settings either,

or those, they will come in due time,

when we look at the rest of the lectures in CloudFormation.

So right now we just have a template.

The template is ready.

As you can see, it has been uploaded

to Amazon S3 by AWS.

So when we click on upload a file, it goes to S3,

and then CloudFormation is referencing this file

in Amazon S3.

And finally, if we're good to go, then we click on Submit,

and voila, our first stack is being created.

So now as you can see in events, we have one event,

which is that the stack is being created.

Now if I refreshed this,

as you can see there is MyInstance Create in Progress,

and it was very quick.

Now MyInstance is in Create Complete.

And what that means is

that the EC2 instance has been created.

Now how do I access it?

Well, if you click on Resources,

here, you see that one resource has been created,

and the Physical ID is right here.

And if you click on it, this takes you directly

into the Amazon EC2 console

for you to look at this EC2 instance

that has been created by CloudFormation.

So as we can see, the instance type is t2.micro,

just as you requested it.

If we have a look at the availability zone, which is,

I'm not exactly sure where is going to be.

Yeah, right here.

US East 1a.

And if we have a look at the AMI, it is going

to be using the Amazon image that we've requested,

exactly that one, which is Amazon Linux 2023.

So this EC2 instance was created exactly

as it was requested in the CloudFormation template.

On top of it, if you look at tags, you can see

that this instance has been tagged by CloudFormation.

We have the stack ID, the logical ID,

and the stack name that have been tagged properly.

So stack name is EC2InstanceDemo.

The logical ID of my resource is MyInstance,

and then the stack ID is a link to the ID

of my CloudFormation stack.

So now going back here,

we can have a look at the stack info, the events,

which is all the events happened to creation of my stack,

the resources which is linked to the resources

that are being created.

Outputs, we currently have nothing.

Parameters, nothing.

And template is the exact template as we uploaded it.

By the way, you can have a look at it

in CloudFormation Designer to see what has been created.

And as you can see, MyInstance

is the only thing being created.

Okay, perfect.

Now let's close this.

And that's it.

So now we've seen the power of CloudFormation.

We started to create one EC2 instance

directly from the templates.

And I will see you in the next lecture

for more hands-on on CloudFormation.

# CloudFormation - Update & Delete Stack - Hands On.

So now that we have created the stack,

we want to update it.

And the only way

to update a CloudFormation stack if we click on update is

to replace the current template.

Or if you wanna say use the current template, is going

to just use the same as it was, but you cannot modify it.

So we want to replace the current template with a new one.

And so for this, let's go into our code

and let's go to one EC2 with SG-EIP-YAML.

And this one is actually an update over the previous one.

So we have created a new template

and we've added a lot of things

that we're going to learn about in this course.

But we have a parameter.

We have the resources of the EC2 instance, which has

more parameters, so it has security groups attached to it.

And so we are referencing security groups

that are being created later on.

So before that, we also have an elastic IP,

which is attached to my EC2 instance,

and then one security group here

and a second security group here.

So we will have a look at these in greater detail later on.

So don't need to look at it too much,

but you can start to have a look

and see if you can read these transformation templates.

The idea is that things are changing,

so let's upload a template file

and we're going to choose one with SG-EIP.YAML.

So we click on next

and we are prompted with a parameter being called

security group description.

This is coming straight from this, so we are going to have

to enter, "This is a cool security group"

and you can enter whatever you want here.

I just wanna show you the effect of this in a second.

Let's click on next.

And we scroll down next

and we have a look at the summary.

So we're going to specify now stack details

with a new security group description.

And at the bottom we have access to a change set preview.

So a change set represents a list of things that is going

to change as part of your CloudFormation updates.

And as we can see here, four things are going to happen.

The first one is that it will be added, a elastic IP.

It will be added an SSH security group

of type security group, a server security group

of type security group.

And finally, my instance, which was my EC2 instance from

before is going to be replaced, replacement true.

That means that the previous one is going to be terminated

and the new one will be created to replace it.

Sometimes you will have replacement false, which means

that the resource can have a change in place.

And that is for CloudFormation to define

and to say based on the changes you've operated.

And of course if you're not happy with it, you can try

to understand why there is a replacement

and change your code and hopefully get the outcome you want.

But here now we have replacement true.

So let's submit this.

And as you can see now in the same stack,

we now have an update in progress.

So we refresh and the first two things that are happening

is that we have a server security group

and an SSH security group being created.

And then after this we have my EC2 instance that is going

to be updated

and it says the requested update requires the creation

of a new physical resource, hence creating one.

This is due to replacement true.

And so what we can observe is that if you go

to EC2 instances and refresh, so let's remove this filter.

Now we have access to the previous instance

and then this new instance that is being created.

That's why it's in the standing state, which is going

to replace the previous one.

So now it is in the running states.

So back into CloudFormation, I'm going to refresh this.

As you can see the new resource has been created.

Now we have the elastic IP being created.

So create in progress.

And if we have a look at on the left hand side,

the elastic IP, we're going to find

that this elastic IP that has been created.

And if we have a look at the tags of this elastic IP,

as you can see it has again been tagged.

So it has a logical ID, a stack ID

and a stack name in its stack.

So all of this is done automatically by CloudFormation.

And so if you refresh,

and as you can see, this elastic IP is going to be attached

to my EC2 instance,

and the previous one is going to be deleted

because it is a replacement.

So back in here, let's refresh.

As you can see, this one is shutting down

and being terminated and the one that was created,

if we have a look at the public IP, it is right here

and it corresponds to this elastic IP address.

As you can see, if we look at the summary of this,

this elastic IP has an associated instance ID,

which is the one that was created by CloudFormation.

So this is extremely powerful.

Of course, we can go to security

and have a look that yes, indeed two security groups

have been attached to my EC2 instance,

and we can have a look at them both.

So one and two in here.

So this first one is the SSH security group

and has an inbound rule on port 22.

And if you have a look at the tags, well again,

it has been tagged by CloudFormation as expected.

And if we have a look at the second one, this server

security group, then we have more rules, SSH, and HTP.

And on top of it, if we look at the description

of this group, it says "This is a cool security group."

So the parameter that we put

actually helped us write at runtime the description

of this security group.

And that's the whole power of parameters.

So back into my CloudFormation stack, I can refresh,

I'm at update complete.

And if I have a look at my resources,

we now have four resources

that we just looked at under my CloudFormation stack.

The parameter we set from

before, which was "This is a cool security group,"

got inserted as the security group description

for this one security group.

And we've seen the whole power

of doing updates through CloudFormation.

Again, nothing was done manually.

The template was updated and uploaded.

And then here we go.

CloudFormation figured out how to get to the final states.

Now to clean up CloudFormation, you could right click here

and terminate your instance,

but then it's going to be a problem

because your security groups are still going to be here.

Your elastic IP is still going to be here and so on.

So how do we clean up?

Well, actually from CloudFormation you can click on delete

and to delete a stack.

This will delete all the stack resources

and this will clean up everything

that was created by CloudFormation.

So I'm going to do it right now.

Now we have a delete in progress,

and if you have a look at your events, again,

my elastic IP is being deleted.

Then the next thing being deleted is my EC2 instance.

So if I refresh this now, it's shutting down.

And then finally we will have our security groups.

And the cool thing about it is that CloudFormation was able

to determine on its own the order

of which it should delete things, which is very handy.

So from CloudFormation you'll see how to create, how

to update, and how to delete all resources within a stack.

And hopefully that is a good intro

to the power of CloudFormation.

So I hope you liked it,

and I will see you in the next lecture.

