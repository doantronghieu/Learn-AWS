Now let's have a detailed look

at the first type of invocation for

lambda functions that we've already been using,

called the synchronous invocation.

So you're doing a synchronous invocation

when you're using the CLI, and the SDK,

the API Gateway, or even an

Application Load Balancer.

What does that mean by synchronous?

that means that you're waiting for the results,

and then the result will be returned to you.

And any errors that come backs to you

must be handled on the client side.

That means that if my lambda function fails,

and I just invoked it from the console,

I want to click on the retry button to retry it.

So that means that any time there is an error

on lambda, the client has to figure out what to do.

Do you want to retry it, do you want to do an

exponential backoff, etc etc.

So synchronous means a direct invocation

that you weight the result of.

So the CLI and the SDK would just invoke

our lambda function, the lambda function would

do something, and give us our response.

This is the same when we'll use the API Gateway

in the future sections, so the clients will invoke

the API Gateway, the API Gateway will proxy its

request to the lambda function, so it will

invoke the lambda function for you; the lambda function

will give the response to your API Gateway,

which will give you the response.

And so in this schema, we're just waiting for

the response that makes it a synchronous type of

invocation.

So, what services are synchronous with lambda?

Well, first of all, any time it's user-invoked

then it's going to be synchronous.

So: Elastic Load Balancing through the

Application Load Balancer, the API Gateway,

CloudFront with Lambda@Edge that we'll see.

Anything in bold right now is stuff we'll see

in this course, and anything not in bold

will not be seen in this course.

So Amazon S3 Batch; all the services,

such as Cognito, Step Functions, and other services:

Lex, Alexa, and Kinesis Data Firehose.

So in this section we're going to see

Application Load Balancer, API Gateway,

CloudFront, we'll see Cognito and Step Functions,

in their respective sections.

Okay.

So, now that we know what services invoke a

lambda function synchronously, let's have a play

with the hands on.

# Lambda Synchronous Invocations Hands On

Okay, so let's have a look at the synchronous invocations.

And actually when we had our code over function,

and we just did test, then this was a synchronous invocation

because we are waiting for the results of the invocation,

and we get it here in this window.

If it took maybe two minutes

for this invocation to complete,

we would have waited two minutes

to get the execution results.

Very simple, this is what goes on through the UI.

The other thing we can test

the synchronous invocation with is using the CLI.

So I'm going to open AWS CloudShell

which is available in my region,

otherwise you can just use the CLI for this use case

with your terminal,

and in here, as we can see the errors command line

is available to us.

So if I do give us management version

we get the fact that it is version 2.1.

So this is perfect.

Okay. So let's use this CLI to list our functions.

So it was Lambda list functions

and this should list the functions within the region.

Make sure to add the region flag

if you're using this CLI so for me, it's EU west 1.

if using the CLI in your terminal

and not using CloudShell,

but here we go, we have found that we have our function name

or function ARI and the runtime

and so on out of the function that is right here.

So next we want to do a synchronous invocation

from the CLI of our lambda function, and for this

this just go into our code and

under a synchronous.sh we have the different commands.

So I'm on Linux Mac because this is CloudShell

and this is using the CLI V2 versions.

So if you see have CLI V1, a version

one version is going to be a slightly different

for the command line

but you should have version two by now.

So use this command and then you paste it.

And this is going to invoke my function name

hello world is going to pass in this payload.

And then it's going to write the response

of json as a result.

And I can remove this region argument right here.

Otherwise it's not going to work.

So I press enter.

And it says a function has not been found, for some reason.

So yes, the name is not hello world.

It is a demo Lambda in this example.

So I'm going to go in here

and change the function name to demo lambda.

As we can see now this is working, we get a 200 result back.

And then if I do go into response to json

we get the value 1 as a response to that.

I mean, my synchronize invocation has worked.

So that's it for this lecture.

I hope you liked it.

And I will see you in the next lecture.