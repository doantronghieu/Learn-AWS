- [Stephane] Welcome to the first deep dive

on an iterator service.

The first one is called IAM.

So IAM stands for identity and access management.

It is a global service because in IAM,

we are going to create our users and assign them to group.

So we've already used IAM without knowing,

when we created an account, we created a root accounts,

and has been created by default.

This is the root user of our accounts.

And the only things you should use it for is

to set up your account as we'll do it right now.

But then you shouldn't use that account anymore,

or even share it.

What you should be doing instead, is create users.

So you will create users in IAM,

and one user represents one person within your organization.

And the users can be grouped together if it makes sense.

So let's take an example we have an organization

with six people.

You have Alice, Bob, Charles, David, Edward

and Fred so all these people are in your organization.

Now Alice, Bob, and Charles they work together.

They're all developers.

So we're going to create a group called

the group developers who regrouping Alice,

Bob and Charles.

And it turns out that David and Edward also work together.

So we're going to create an operations group.

Now we have two groups within IAM.

Now groups can only contain users, not other groups.

So this is something very important to understand.

Groups only contain users.

Now, some users don't have to belong to a group.

For example, Fred right here is alone,

he does not correspond to any group.

That is not best practice.

But it is something you can do in AWS.

And also, a user can belong to multiple groups.

That means that for example, if you know that Charles

and David worked together,

and they're part of your audit team,

you can create a third group with Charles and David.

And as you can see, now, in this example,

Charles and David are part of two different groups.

So this is the possible configurations for IAM.

So why do we create users and why do we create groups?

Well, because we want to allow them to use our AWS accounts

and to allow them to do so,

we have to give them permissions.

So users or groups can be assigned

what's called a JSON document.

I'll show you right now what it means called a policy,

an IAM policy.

So it looks just like this.

So you don't have to be a programmer.

This is not programming.

This is just describing in, I think plain English,

what a user is allowed to do or what a group

and all the users within that group are allowed to do.

So in this example, we can see that we allow people

to use the EC2 to service and do describe on it,

to use the elastic load balancing service

and to describe on it and to use CloudWatch.

Now we'll see what EC2 elastic load balancing

and CloudWatch mean, but through this JSON document

that looks just like this.

We are allowing our users to use some services in AWS.

So these policies will help us define permissions

of our users.

And so in AWS, you don't allow everyone to do everything

that would be catastrophic,

because a new user could basically launch so many services

and they will cost you a lot of money

or would be valid for security.

So in AWS, you apply a principle called

the least privilege principle.

So you don't give more permissions than a user needs.

Okay, so if a user just needs access to three services,

just create a permission for that user.

So now we have seen an overview IAM.

Let's go in the next lecture

to practice creating users and groups.

So let's go ahead

and practice using the IAM service to create users in AWS.

So in the search bar,

I just type IAM and I go into the IAM console.

So upon arriving on the IAM Dashboard,

we have some security recommendations

that we can for now not care about.

And what I want to draw your attention to

is that on the left hand side, we go to users.

So this is where we're creating to create users for IAM,

but first, let's notice something.

If you go to the top right corner and click on Global,

you can see that the region selection is not active.

That means that IAM as an entire service is a global service

and therefore there is no region to be selected.

When you create a user in IAM,

it will be available everywhere,

but some other consoles we'll see in this course

will be region-specific.

So just something to notice.

Okay, so now we have users, and why do we create users?

Well, we create users,

because right now, we are using what's called the root user.

So if you click on this,

you see there's just the account ID available to you.

So when you have it,

that means you're using the root account

and it's not best practice to use the root account.

So therefore, we want to create users such as admin users

that will allow us to use our accounts more safely.

So for this, let's go ahead and create a user,

and I will provide a username, for example, Stephane.

So of course I want to provide myself access

to the management console,

so I'm going to do this,

and we have the option to use identity center,

which is recommended,

or to create an IAM user.

I will choose the second option because it is more simple,

and from an exam perspective,

this is the one you need to know about.

But don't worry,

this does not affect how your course is going to go.

Okay, so we create an IAM user,

and now we have to set the password.

So if this was a user that was not me,

I would leave it as auto-generated password,

and I would leave this

so that the user must change this password

at the next sign-in,

but because it is me,

I'm just going to enter a custom password

and I'm going to untick this

because I don't need to change my password

at the next login.

So let's click on next.

Next, we have to add permissions to this user,

so we can add it directly or we can get started with groups.

So let's create a group, and we're going to create a group.

The group name is going to be admin

and the policy name is going to be administrator access.

So now that this is done,

we can add the user into the admin group.

So let's click on next,

and we can review everything right now.

So we have the username, the permissions on the group,

and we have tags, and tags are everywhere in AWS.

They're optional, but they allow you to give metadata

to many of your resources.

For example, I could say

that the department of Stephane is engineering.

This is not something I'm going to do everywhere

on the course,

but I want show you once how

you can add tags to resources in AWS.

Okay, so now the user is created successfully.

So now we can email signing instructions or download

CSV files and then we can log in with this user.

But first, let's return to the user list

and have a look at everything.

So here is my user lists, here is me

and we also have groups.

So if I go to the left hand side, user groups,

we have admins.

So let's observe admins.

So admins has one user in it named Stephane.

And if you look at permissions of admins

you see that there is administrator access attached

to the admin group.

Now if I go to my user, Stephane in here,

we can look at permission policies

and see it also has administrative access

but this one has not been attached directly.

It has been attached via the group admin.

So that means that Stephane inherited any permissions

of the group admin it is in.

And this is why we put users in groups.

It is a bit more simple to manage permissions this way.

So now let's go back to our dashboard

and we want to sign in with our user, Stephane.

So first what we can do is look at our AWS accounts

and it has an account ID and a Sign-in URL.

Now you can customize this Sign-in URL very easily

by creating what's called an account alias.

So it could be aws-stephane-v3 and then Create alias

so whatever alias until someone hasn't created it,

so it has to be unique.

For example, v5 is available.

So now using this alias can simplify my signing URL.

Now to sign in using my Stephane accounts

we could use the same browser

or we could create a new browser window in private mode.

And the benefit of doing this is

that we can have two windows side by side using AWS.

So if you don't do this, that's fine, but if you log

in using the Stephane account on the right hand side window

then you will be disconnected on the left hand side,

this is the only difference.

So to use two accounts at the same time,

the route on the left and my account on the right

what I'm doing as a trick is that I'm using a private window

on my web browser, and Chrome has this feature,

Firefox as this feature, Safari as this feature, and so on.

So by pasting the signing URL, as you can see,

I get the sign in and as an IAM user

and to get to this page, we can go back to one.

And as you can see, when you do a sign in on AWS,

you have the root user sign in or the IAM user sign in.

So to get back to this, we go to IAM user.

We enter either the account ID or the account alias

that I can copy in here, and then we are taken to this page.

So the IAM user name is going to be Stephane

and the password is going to be whatever you have set

from before, then you sign in.

So now the cool thing is that if I look

at the top right hand side, IAM logged in using my IAM user.

So it says the account ID and the IAM user.

But if I look on the top right hand side of here

it just says the account id

which shows me it's the root accounts.

So here we are, we have the root accounts logged

in on the left hand side through a normal window

and we have the IAM user logged in on the right hand side

through a private window.

Please make sure not to lose your root account

logins and your admin login.

Otherwise, you will be in deep trouble with your

account and you'll have to contact AWS for support.

And currently I cannot help you with this.

Now from a course perspective,

I recommend you use your IAM user and not your root user

but this is just a normal recommendation.

Sometimes you'll see me using root

sometimes I'm using IAM user.

But when you have to use roots or when you have

to use an IAM user, I will let you know in the course.

Don't worry about that.

Now for the rest of this section,

please keep these two windows open and I will

see you in the next lecture.

So here are some general guidelines

on IAM and best practices, 'cause I don't want you

if you go to use AWS to make some mistakes.

So do not use a root account

except when you set up your AWS account.

So by now you should have two accounts, a root account

and your own personal accounts.

And remember, one AWS user is equal to one physical user.

So if a friend of yours wants to use AWS,

do not give them your credentials,

instead, create another user for them.

You can assign user to groups

and assign permission to groups to make sure

that security is managed at the group level

and should create a strong password policy.

Also, if you can use and enforce the use

of multi-factor authentication or MFA to really guarantee

that your account is going to be safe or safer from hackers.

Then you should create and use roles whenever

you're giving permissions to AWS services,

and that includes easy two instances

which are virtual servers.

If you were to use AWS programmatically or using the CLI,

so the CLI or some SDK, you must generate access keys,

and these access keys are just like passwords,

they're very secret.

So just keep them for yourself.

To edit the permissions of your account,

you can use the IAM credentials reports

or the IAM Access advisor feature.

Finally, never, ever, ever share your IAM users

and access keys, I am very serious about it.

So that's it,

we are nearing the end of this section.

You know everything about IAM.

I will see you in the next lecture.

So here is a summary for IAM.

We've seen IAM users and they should be mapped

to an actual physical user within your company.

And this user will have a password for the AWS console.

Now we can group these users into groups

and therefore users only.

We can attach policies

or share JSON documents that outline the permission

for users or groups.

And we can also create roles

and these roles will be identities, but this time

for maybe EC2 instances or other AWS services.

We assume that for security

we can enable multi-factor authentication so MFA

and also set a password policy for our users.

We can use the CLI to manage your services

using the command line

or the SDK to manage your AWS services,

using a programming language.

Finally, we can create access keys to access AWS

using the CLI or the SDK.

And finally, we can audit our IAM usage

by creating an IAM credentials report

and also using the IAM access advisor service.

So that's it for this lecture.

I hope you liked it.

And I will see you in the next lecture.