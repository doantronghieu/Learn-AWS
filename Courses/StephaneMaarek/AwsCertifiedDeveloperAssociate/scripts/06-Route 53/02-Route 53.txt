So now that we know what is a DNS,

let's have a look at Amazon Route 53.

So this is a highly available, scalable,

and fully managed and authoritative DNS.

What does authoritative means?

That means that the customer you can update the DNS records,

so you have full control over this DNS.

So the idea is that you have your clients

and they want to access your EC2 Instance @example.com

but right now your EC2 Instance only has a public IP.

Therefore what's going to happen

is that we're going to write some DNS records

into Amazon Route 53, into a hosted zone,

and when the client is asking for example.com,

then the Route 53 service will be able to say,

"Hey, you're looking for this IP 54.22.33.44,"

and then the clients will be able to connect directly

into our EC2 Instance.

So Route 53 is also a domain registrar,

so it will be able to register our own domain names there

such as example.com, and we'll be doing this

in the hands-on to allow us to get started

with this service.

So we have the ability to check also the health

of the resources within Route 53,

we'll see this in the section.

And this is the only service in AWS

that will provide 100% availability SLA.

Finally, why is it called Route 53?

Well, 53 is a reference to the traditional DNS port

used by DNS services, hence the name.

So in Route 53 you're going to define a bunch of DNS records

and the records define how you want to route traffic

to a specific domain.

So each record is going to contain a lot of information

such as the domain or the subdomain names

such as example.com.

The record type, and we'll see what types of record

we have available to us, for example it could be A or AAAA.

Then the value, so the value of the record,

for example, 12.34.56.78

The routing policy,

which is how a Route 53 will respond to queries.

The TTL, which is the amount of time

the record is going to be cached at the DNS resolvers,

also called time to live.

And then we have a lot of different supported

DNS report types in Route 53.

So we have, the ones you must know is A, quadruple A,

CNAME, and NS, so we'll have a look at those

in the hands-on.

And the advanced records that you can set,

but we don't need to know from an exam perspective,

are all the ones I just wrote right here.

So let's learn about the important record types

we need to know from an exam perspective.

So the A record is very simple,

it's to map a host name into an IPv4 IP.

So this is when you have, for example, example.com

that will be directed into 1.2.3.4.

Okay, great.

Then we have quadruple A.

So this is the same idea as A,

but this time we're going to match our host name

into an IPv6 address.

Then we have a CNAME, which is used to map a host name

into another host name.

And then the target host name of course may be an A

or a quadruple A record.

You can not create CNAMES in Route 53

for the top nodes of a DNS namespace or the Zone Apex,

and we'll see this in a future lecture as well

to understand how that works.

For example, you can not create a CNAME for example.com,

but you can create a CNAME record for www.example.com.

So we'll see how we can deal with this in a future lecture.

And then finally, NS is for name servers of the hosted zone.

They are the DNS names or IP addresses of the servers

that can respond to the DNS queries for your hosted zone,

and this will control how traffic is routed to a domain.

So let's have a look at what are hosted zones.

So hosted zones are a container of records,

and they will define how to route traffic

to a domain and its subdomain.

So we have two types of hosted zone,

we have the public of zones and the private hosted zones.

So whenever you buy a public domain name,

for example mypublicdomain.com, this is a public domain name

and therefore we can create a public hosted zone

and these public zone can answer the query,

"Hey, what's is the IP, underlying IP of the domain name

application1.mypublicdomainname.com?"

But we also have private hosted zones.

And these are for domain names that you,

they are not publicly available, they're privates,

and only you within your own virtual private cloud or VPC

can resolve this URL.

For example, application1.company.internal.

You may have seen this if you're working

for a private company, they sometimes have URLs

that you can only access from within your corporate network,

that's because this is a private URL, this is a private

and behind the scenes there is a private DNS record.

So for any hosted zones you're going to create an AWS

you're going to pay 50 cents per month,

so this is not free to use Route 53.

And if you are to register a domain name,

just like I will in the hands-on,

this will cost you a minimum of a $12 per year.

So just so you know, this section is not free.

So public versus private hosted zones, just to understand.

So public hosted zone can be answered,

can answer queries from public clients.

So when you web browser, for example, and say,

"Hey, give me example.com," and then it returns an IP.

And on the other end we have the private hosted zone.

So this is from within your VPC they live.

And so they allow you to identify private resources

with private domain names.

So for example, we have one EC2 Instance

that we want to identify with webapp.example.internal,

we have another EC2 Instance that we want to identify

with api.example.internal, and then we have a database

we want to identify with database.example.internal.

In which case we're going to register a private hosted zone,

and then in case the first EC2 Instance

is requesting for api.example.internal,

then the private hosted zone has an answer for it,

which is the private IP 10.0.0.10.

Then the EC2 Instance will connect

to the second EC2 Instance,

which may need to connect to database.

So it will say, "Hey, what's database.example.internal?"

And the private hosted zone will say,

"Well, this is this private IP."

And then the EC2 Instance can connect directly

into the database.

So the public hosted zone and the private hosted zone

work the exact same way, but just the public hosted zone

allows anyone from the internet to query your records,

so this is for your public records,

whereas a private hosted zone is only queried

from within your private resources, for example your VPC.

So that's it for the theory,

now let's go into the next lecture to register a domain

and then create some records.

So I will see you in the next lecture.

# Registering a domain.

Okay, so we are in Route 53

and we're going to be registering domains.

So as you can see, I have one hosted zone and one domain.

You should have none right now.

It's just because I've been using my accounts before.

But let's go and register a domain.

So on the left hand side,

click on register domains

and you have a new console experience.

If you don't have it, you can click

on somewhere to use the new console and I will use this

because this is what's going to happen moving forward.

So here we have a domain name.

This is stephanetheteacher.com.

It's something I have registered a while ago

and you will have nothing.

So what we need to do to get started

with Group 53 is to actually register our own domain.

So this is going to cost you money

and if you don't want to pay

say $12 a year to have a domain name,

just don't do this and watch this section entirely.

So I'm going to follow the step you would follow.

So register domain, and here you just enter a domain name.

So something that no one else has chosen before

whatever you want.

Okay? The idea is that you choose a domain name.

So hopefully no one has registered domain name.

Okay, perfect.

So I can buy this one for US $13 a year.

So I will select it and it's in my basket.

So I'm going to proceed to checkout.

So here is my domain name.

I can choose Duration, for example, one year

and I can autorenew or not autorenew.

So if you intend on keeping a domain,

please leave autorenew on.

If you don't want it at the end of the year,

click it so that it's off.

But of course, if you use the domain,

it's much better to keep autorenew on.

Otherwise someone will be able to buy the domain

when you lose it.

And this is not good, so up to you to keep it on or off.

But if you just intended to have it

for the course, then leave it off.

Okay, click on Next.

Then we have contact information.

So this is the information that you have part

of the account that has been pre-populated.

And so you can enter your own information if you wanted to.

And so the admin contact

and the tech contact can be the same

as the registrant contact.

And finally, you should enable privacy protection

so that you don't receive spam.

And so that the real contact information,

your own personal address, phone number, et cetera

is hidden from the internet.

You click on Next and then you have the review page.

So make sure everything is correct

and you check the terms and condition.

And if you submit, just so you know, you will pay these $13.

So please don't do this

if you don't want to pay that amount of money.

Then your domain is going to be registered

after a little bit of time.

It can take a few minutes or a few hours

but you'll be good to go.

And to confirm everything, just go on the left hand side

to hosted zones and then you click on stefanetheteacher.com

or whatever domain name you have registered.

And you will have a few records

and you should have two records.

I have four because I've been using this before.

But you should have the NS record and the SOA record.

And the NS record is simply saying

that you should use the AWS DNS

to insert DNS queries.

And this is Route 53.

So what this means that now that we have a hosted zone,

anytime we will insert DNS records such

as this one or that one

and I will teach you in the next lecture is how to do it.

Then the source of truth

for these DNS records will be Route 53 itself.

So what we're configuring in here, so that's perfect.

We're good to go.

We have a domain name

and we can get started with the hands-on.

I hope you liked it and I will see you in the next lecture.

# Creating our first records.

So now let's go ahead

and create our first records in Route 53.

So I'm going to go into my hosted zone,

and in there I'm going to create some simple records.

So let's have a look.

We're going to create a record by clicking on here.

And in here, I can just have a record name.

So we want it to be test.stephanetheteacher.com.

But you can enter anything you want here.

This is how you would create your domain names.

Now you have to specify the record type.

So you can see there's a lot of record types in here,

but for now we'll keep it simple.

We'll keep it as an A record.

And which is to route an IPv4 address

into a domain name, to an IPv4 address.

So the answer is going to be

value is 1, 1, dot, 2, 2, dot, 3, 3, dot, four four.

Which is just a value we want to have,

and this is not a domain, an IP we own right now,

but just to show you just a random value.

Later on, we'll be routing to a real institute instance.

Okay.

TTL is time to live.

We'll leave it as 300 seconds right now.

And the routing policy will

routing policy will have a look at it later on as well.

We'll leave everything as simple routing. Okay.

So let's go ahead and create this record.

And now my record has been successfully created.

So the idea is that if I go to test.stephanetheteacher.com,

it is going to ask my host zone.

What is the value of that? And those isn't going to say,

well, the value of it is 1, 1, dot, 2, 2, dot,

3, 3, dot, 4, 4.

So if you try it to do it with a web browser,

so if you take your browser and you open it

and you press enter,

and it's not going to show you many things,

because right now we don't have 11.22.33.44,

there's probably no server that exists with that IP as well.

And if I try to just access this URL,

it doesn't work. Okay.

So what we know is what is going on behind the scenes.

And so for this, we're going to type some command lines.

Now you can be using your command line

on your windows laptop, or your Mac,

but because I want everyone to follow the same way as me,

I'm going to show you how to do it using

the CloudTrail environments in AWS.

So let me open the management console,

and then I'm going to click here to open cloud shell and

cloud shell is going to allow me to do some commands using

a standard Linux command line interface. Okay.

But this is fine,

if you want to just do it with your own terminal on windows

or on Mac.

Okay. So my terminal is not ready.

And if you're on windows,

the NS lookup command is going to work. If you're on Mac,

the dig command is going to work as well.

But as you can see, these commands are not found

on my cloud shell.

So I need you to install them.

So I do sudo yum, and then install

minus Y and then bind

minus utils.

And it's going to install both VNS lookup

and the dig commands on my cloud shell.

So lets clear the screen.

And now let's try to do NS lookup,

test.stephanietheteacher.com.

And as you can see, I get an answer,

which is at test.stephanietheteacher.com,

is going to 11.22.33.44,

which is corresponding to what is happening right here,

which is cool.

And I presented like the dig command a little bit more

because I'm more familiar with it,

but if you type dig and then the URL that you have,

okay.

And press enter,

you're going to see that and have the wrong commands.

So stefantheteacher.com,

so let's clear this screen and then retype the comments.

Okay.

Well here, we're going to see

is that we have the answer section

and says, test.stephanetheteacher.com is an a record,

and this is the value of the record. So I like it better,

better, because it shows you the TTL, as we'll see later on,

and also shows you the a record,

the fact that isn't a record. Okay.

So we have created our first route 53 record,

and we have been able to query it using a terminal,

which is cool.

Obviously loading it from a webpage doesn't work right now,

but we'll see how we can do it later on

when we have a real server.

So I hope you liked this lecture

and I will see you in the next lecture.

# EC2 Setup.

So let's get started.

And before we use Route 53,

I want to go ahead and create three EC2 instances

in different regions, as well as one ALB.

So in one of these regions I'm going to go

into instances and then launch an instance.

And very simply, I will choose Amazon Linux2

on this architecture, a T2 micro type of instance.

I don't need a key pair, because I will use,

if I need to, I will use EC2 instance connect.

And then for network settings,

I'm going to create a security group.

I will allow SSH as well as HTTP from anywhere.

Then I will just, in advanced details,

specify a bootstrap user data script.

So, to do so, just go into your Route 53

user script and you copy this entire script.

And you paste it here.

So what's going to do is it's going to say

hello world from the instance, just as before.

But now we're going to add the AZ

the instance was launched in,

using this environment verbal called EC2,

availability, zone that I created from before.

So it's going to give us a little bit

more info about EC2 instance.

So I'm going to go ahead and launch this instance.

So this has been launched and it is right here.

Okay, that's good.

Next I'm going to go into another region.

For example, Northern Virginia, so US East one.

And then I will launch an instance.

And same settings.

So again, no key pair required.

So proceed without a key pair.

I will allow HTTP as well.

And for advanced details, I will provide

the exact same EC2 user data script.

Then we click on launch instance and we're good to go.

And finally I'm going to go into

one last region, for example Singapore.

And in Singapore I'm going to launch an instance.

And then we'll leave it as t2 micro,

we will choose no key pair.

We'll allow HTTP from anywhere.

And then, under advanced details,

I'm going to paste in the data and launch this instance.

Okay, so we have three instances

now being started in three different regions.

So we have one in Frankfurt,

one in Northern Virginia, and one in Singapore.

So this is good.

Lastly, what I'm going to do is that

I'm going to launch a load balancer

in Frankfurt, for example.

So here I'm going to create a load balancer

and choose an application load balancer.

Create.

And then the unique name will be DemoRoute53ALB.

This is fine, it's going to be internet facing, on IPv4.

I will choose for mapping, one, two, and three subnets.

And for security group I can choose up to five.

So I'm going to choose the one that I've created

just from before, which was the launch user two,

which had AWS and HTTP enabled.

This way we're sure that HTTP is enabled.

And the protocol is on 80, you're going

to forward to a new target group,

that we're going to have to create, based on instances.

And I'll call it this one demo tg route 53.

And, what I want to do is next

and register my one instance right now

that I just created from before.

So you do include as pending below.

Then on the review targets, you have one target.

And then create the target group.

So the target group is not created.

So back into model balancers.

I can refresh this and select the demo tg group route 53.

And everything looks good.

Let's create our load balancer,

and then click on view the balancer.

And here we go.

So now to summarize, let's see

if everything has been working properly.

So, we have one EC2 instance right here.

And let's take the public IP, so I'll just copy

the IP itself, make sure using the IP via http.

And it says hello world from blah, blah, blah.

So this is good, so what I'm going to do

is that I'm going to, under a text file,

just to have a mark of a trace of everything,

I'm going to put the IP address

as well as the region I'm in.

So EU central one.

As you can see, it says hello from AZ EU central one B.

Okay, so this instance is working.

I'm just testing whereas everything's working.

So I'm going to also take this public IP right here,

paste it in, and it says yes hello from US East one A.

So this is perfect, so this is US East one.

And the last instance right now it's here.

And then I'm going to copy this IPv4 address,

paste it in, and it says hello from AP Southeast one b.

So this one's working as well.

So let's go here, AP southeast one.

And finally, if I go under my ALB

and take the DNS name right here,

let's see if it has been provisioned.

So let's refresh this.

So it is provisioned as we can tell.

So this can take a bit of time.

So for you, it may not work, for me it worked.

And so because it is pointing to one EC2 instance,

it's a hello world from AZ EU Central one B.

So now we have properly set up

all our instances, as well our GNS.

So we're good to go.

And keep this information handy,

and I will see you in the next lecture.

# TTL.

Okay, so let's have a look at TTLs.

So a record TTL is a Time To Live.

And let's take this example where a client is accessing

our DNS Route 53 and a web server.

So we do a DNS request for myapp.example.com,

and we get an answer from the DNS,

which is saying, hey, please, this is an A record.

Here is the IP, and there is a TTL,

maybe a TTL of 300 seconds.

So TTL is saying, hey clients, please cache this result

for the duration of the TTL.

So for 300 seconds,

the client is going to cache the results.

That means that if the client is requesting again

or accessing the same host name,

what's going to happen is that

the client will not issue a query to the DNS system,

because it already knows the answer,

because the answer has been cached,

and we're still within the cache period, so the cache TTL.

The idea behind this

is that we don't want to query the DNS too often,

because we don't expect records to change a lot,

and so, therefore, using the response it has,

the client can access our web server

and do HTTP request and responses.

So we have, you know, two extreme cases.

For example, if you set a high TTL of, say, 24 hours,

then this is going to do a lot less traffic on Route 53,

because less clients are doing requests,

because the result are cached for 24 hours,

and, possibly, while the client will have outdated records.

If somehow you want to change the record,

you will need to wait 24 hours

to make sure that all your clients

will have the new records in their cache.

If you said set a low TTL,

for example, 60 seconds, at the opposite,

then it's going to do a lot more traffic on your DNS,

so a lot more dollar you're going to spend,

because you get price per how many request

do reach Route 53.

But the records will be outdated for less time,

so it's quicker for you to do a record change,

and it's easier to change records overall.

So it's up to you, really,

to see what a good TTL or low TTL is.

If you plan on changing a record,

the idea is that sometimes

you will decrease the TTL for, say, 24 hours,

and then when you know that all the clients

have a new TTL that is low,

then you change the record value

which gets updated for everyone,

and then you increase the TTL.

This is a strategy.

So the TTL is mandatory for every record

except the Alias record that we'll see in the next lecture.

So let's have a look how TTL works in the console.

So let's have a look at how Time To Live works.

So let's create a new record,

and this one is going to be called

demo.stephanetheteacher.com,

and the value of it is going to be

one of the EC2 instances we know.

So let's take the one in eu-central-1.

So I'm gonna take this EC2 instance

and paste the value of it.

And then for the TTL, we're going to set two minutes.

So to do so I'm going to click twice on this minute button.

So the TTL is now 120 seconds.

So let me create this record.

And now my record has been created.

So it is an A record pointing to a specific IP

at demo.stephanetheteacher.com.

Now, I want to show you that the record is working,

but Firefox is not very nice with me.

So if I try to open this in Firefox

it's going to give me a problem.

So this is not something I can fix easily,

so I'm going to use Google Chrome on the right-hand side

to show you this.

So if I do demo.stephanetheteacher.com on Google,

then automatically it should direct me to, yes,

my eu-central-1 instance.

So that means that this record, this A record,

is fully functioning.

And I can also make sure of that,

for example, if I'm using CloudShell.

So if I clear this and do an nslookup

on demo.stephanetheteacher.com,

as you can see, the address is correct.

And if I do a dig command on this, then we get an answer.

And there's a cool number that we're showing here,

so the answer section, there's 115.

So the idea here, that's because I did do a DNS query.

Then the record get cached for 120 seconds.

And if I retype again this dig command right here,

as you can see the number got down to 98.

So that means that for 98 seconds,

actually, I will get the same response,

because, no matter what,

this is what's cached on my computer.

So if I'm very quick

and I go to this record right here and I edit it,

so instead of this IP, I want to go to ap-southeast-1,

so we'll use the first IP in my list and save this.

So even though this record was being updated, okay,

if I go into CloudShell and, again, do this dig command,

as you can see, the insert is still the same as before.

That's because for 66 more seconds

this is going to be cached.

And if I go to Chrome, I think I was fast enough,

I go to Chrome and refresh this page,

as you can see, I still have the answer from eu-central-1.

And this is because, again,

my record got cached for two minutes.

So when the cache is expiring, then only then

my command line interface or my Chrome web browser

will ask again Route 53 for the value of this record.

And then, again, will I get the answer

and will be redirected to this new IP.

So the best way to check it is just to wait.

So I'm going to wait maybe one more minute

and then get back to you.

Okay, so it's been a minute

and now if I refresh my web browser,

as you can see now, I get a different Hello World

and this time it's from ap-southeast-1b.

And if I go into my CloudShell and do the same dig command,

then, as you can see, there's a new TTL, so 120 seconds,

and there is a new IP right here

which is the IPO menu server.

So this was a cool demo of the TTL.

I hope you liked it, and I will see you in the next lecture.

