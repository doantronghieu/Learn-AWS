Now let's talk about Amazon SNS.

So what if this time you want to send one message

and have many, many different receivers?

So you could have a direct integration where for example

a buying service application could send an email

notification, then send a message to a fraud service

send a message to a shipping service and maybe

even send a message into an SQS Queue.

This is cumbersome because every time

you have to add a new receiving service.

You need to create and write that integration.

Instead, what you may want to do

is called a Pub/Sub or Publish-subscribe.

The idea is that the buying service

will send a message into an SNS topic

which is publishing a message into a topic.

And that topic will have many subscribers.

And each of the subscriber will be able to

receive that message from the SNS topic

and have it for their own.

And so this is another type of pattern

called the Pub/Sub pattern.

So in Amazon SNS,

the event producer only sends messages

to one specific SNS topic.

And the event receivers or the subscriptions,

they want to listen to the SNS topic notifications.

And so therefore each subscriber in your SNS topic

will get all the messages sent to the topic

except if you're using a feature to

filter messages and it is possible as well.

So how many subscribers can you get per topic?

Well you can have up to 12,000,000 plus subscriptions

per topic, so quite a lot.

And the number can change over time.

It will not update this slide.

It's just to give you a overview

of how many subscribers you can get.

And in your account, you can get up to 100,000 topics

and you can increase that limit as well.

And this can change, but again,

just to give you an idea of what the limit may be,

but you're never tested on limits themselves for SNS.

So for SNS, you're going to publish your subscribers

and what can they be?

Well you can directly send emails from SNS.

You can send SMS and mobile notifications.

You can also send data directly into specified HTTP

or HTTP(S) endpoints,

but SNS also has integrations with specific AWS services,

such as SQS,

to send your message directly into a Queue, to Lambda,

to have a function do some code

after the message is received,

or to Kinesis Data Firehose to send data into,

for example, as Amazons free or Redshift.

On top of it, SNS receives data

from a lot of AWS services.

So they directly send it into SNS,

so it could be CloudWatch Alarms,

Auto Scaling Group notifications,

CloudFormation state changes, Budgets

S3 buckets, DMS, Lambda, DynamoDB,

RDS events, and so on.

So you don't have to remember them.

But as soon as there is some sort

of notification that happens within AWS,

services will send a notification

into a specified SNS topic.

Now, SNS, how does that work?

to publish a message into SNS,

you use the topic, publish SDK.

And so you create a topic.

Then you create subscriptions or many

one or many subscriptions you publish

to the SNS topic and that's it.

All the subscribers will automatically

retrieve that message.

Or there is something called direct publish

for mobile apps, SDK,

and you need to create a platform application,

a platform endpoint

and you publish into the platform endpoint,

and it works in terms of subscribers for Google GCM,

Apple APNS, or Amazon ADM, which are different ways

for your mobile application to receive notifications.

In terms of security,

Amazon SNS has the same kind of security as SQS,

so it has In-flight encryption by defaults

At-rest encryption using KMS keys,

and Client-side encryption

if your client wants to send some encrypted message

into SNS, but again,

it's up to your client responsibility to do the encryption

and the decryption.

In terms of of access controls,

IAM policies are going to be at the center

of security because all the SNS APIs will be regulated

by IAM policies.

And you can define SNS access policies

which are very similar to S3 bucket policies,

and they're very helpful when you want to have

cross account access to SNS topics

or to allow other services

such as your S3 events

to write into your SNS topics.

So that's it, I hope you liked it

and I will see you in the next lecture.

# SNS-Fan Out Pattern.

Now let's talk about

the SNS plus SQS fan-out pattern.

The idea is that you want a message

to be sent to multiple SQS queues,

but if you send them individually to every SQS queue,

there can be problems associated with it.

For example, if your application crashes in between,

if there are delivery failures,

or if you add more SQS queues down the road.

Therefore we want to use the fan-out pattern.

The idea is that you're going to push once an SNS topic

and then you're going to subscribe as many SQS queues

as you want to the SNS topic.

These queues are subscribers

and they will all receive the messages sent into SNS.

So for example, we have a buying service

that wants to send messages to two SQS queues.

What it will do instead,

it will send one message into an SNS topic,

and the queues are subscribers of that SNS topic

so that the fraud service and the shipping service

can read all messages from their own SQS queues.

The idea with this as well

is that it's a fully decoupled model

and there is no data loss.

SQS will give you data persistence, delayed processing,

as well as retries of work.

And with this pattern, we can add more SQS queues

as a subscriber of the SNS topic over time.

For this, we need to make sure

that your SQS queue access policy,

as we've seen from before,

allows your SNS topic to write to your SQS queue.

So again, yet another use case

for using queue access policies,

and we have cross-region delivery.

So it's definitely possible for an SNS topic

in one region to send messages

to SQS queues in other regions if the security allows it.

Next, so how do we use this pattern for other purposes?

For example, S3 events into multiple queues.

So there is a limitation of S3 event rules

is that for a combination of event type, for example,

an object is being created

and a prefix, for example,

images/, you can only have one S3 event rule.

But what if you want to send the same S3 event notification

to multiple SQS queues?

In that case, you would use the fan-out pattern.

So for example, we have S3 object created

as an event appearing in your S3 bucket,

and we will send this event into an SNS topic,

and we will subscribe many SQS queues

to the SNS topic as a final pattern.

But we could also subscribe other type of application,

email, Lambda functions, et cetera, et cetera.

And then what we get from this is that the message

of the event happening in Amazon S3

is going to go to many different destinations

thanks to this fan-out pattern.

Another architecture is that you can send data

directly from SNS to Amazon S3

through Kinesis Data Firehose.

So because SNS has a direct integration with KDF,

then your buying service can send data into an SNS topic.

Then Kinesis Data Firehose, KDF,

will receive that information.

And then from Kinesis Data Firehose,

you can send it into your Amazon S3 bucket,

or for that matter,

any supported KDF specific destination,

which allows you to be really extensible in the way

you want to maybe persist your messages from your SNS topic.

So we can apply the fan-out pattern to FIFO topics as well.

So Amazon SNS has a FIFO or FIFO capability,

which is first in first out,

which gives ordering of messages in the topic.

So the producer send the messages.

One, two, three, four.

And the subscribers can only be an SQS FIFO queue for now,

which is receiving messages,

one, two, three, four, in order.

So the idea is that with SNS FIFO,

we get the same features as SQS FIFO,

we get ordering by message group ID.

We get deduplication using a deduplication ID

or content-based deduplication.

And both SQS standard and FIFO queues can be subscribers.

In terms of throughput, you're limited.

You get the same throughput as the SQS FIFO queue.

So why do we need this?

Well, in case you wanna do a fan out using SQS FIFO.

So you need fan out, ordering and deduplication.

So the buying service will send the data

into an SNS FIFO topic,

and then it will fan out to two SQS FIFO queue,

which can have the fraud service

and the shipping service read from FIFO queues as well.

One last feature of SNS that can be really handy

regarding the fan-out pattern

is that you can do message filtering in SNS.

So what is message filtering?

Well, it's a JSON policy that is used

to filter messages sent to the SNS topics subscription.

So if a subscription doesn't have a filter policy,

it will receive every message,

and that's a default behavior.

But let's take an example of what happens

when we set up a message filtering policy.

So we have a buying service

and it sends transactions into an SNS topic.

For example, the transaction looked like

there's an order number,

there's a product, for example, a pencil,

the quantity for, and the state which is placed.

Now we want to create an SQS queue just for placed orders,

not all the orders, but just for placed orders.

So for this, we will subscribe the SQS queue

into the SNS topic, and we'll apply a filter policy in JSON,

and we will specify in a policy

that we want to have State equals Placed.

And so only the messages matching the policy

will go into the SQS queue,

but then we could have an SQS queue for canceled orders.

And so we can create our own filter policy for canceled

orders and have those coming from the same SNS topic

into the SQS queue.

And so the placed orders

and the canceled orders SQS queue

will not have the same messages.

We can also use the same filter policy, the canceled one,

to create an email subscription for canceled orders.

We could have a filter policy for declined orders,

for example, and as another SQS queue,

or we can create an SQS queue without a filter policy

to have all messages from that SNS topic.

So using all these fan-out patterns and message filtering,

FIFO queues and FIFO topics,

we get lots of different possibilities

and the exam will try to test you on all of those.

So that's it for this lecture.

I hope you liked it,

and I will see you in the next lecture.

# Hands On.

So let's practice using SNS.

So we're going to go into the simple notification service

and create our first topic.

So I'll just call this my first topic

and then click on the next step.

So we have two options for creating a topic.

It can either be a standard topic

and this will be creating

which is best effort message ordering

at least once message delivery, highest reboot

in terms of publishers per second

and SQS Lambda HTTP, SMS, email

and mobile application endpoints can read

from this SNS topic, or we've seen

that we could create an SNS FIFO topic.

And this is to get a strictly preserved message ordering

exactly once message delivery.

High-throughput up to 300 publishes per second.

And the only thing that can subscribe

to a FIFO SNS topic is an SQS FIFO queue.

In this case, if we are FIFO, we can see

that the name of the topic has to end with dot FIFO.

So we'll just go with standard

and then we'll use my first topic as the name.

We can encrypt the messages in our topic.

We can set up an access policy

and the excess policy is going to define who

and what can right to the SNS topics.

So this is similar to an S3 bucket policy

and this is similar to also an SQS access to policy, okay?

The idea is that with this access policy, for example

we could set up an S3 buckets

to write events into an SNS topic.

And then as SNS topic can send data to SQS and so on.

So the access policy will be needed

to allow the extra buckets to write to our SNS topic.

So for now just use basic

because we don't need to do anything fancy

and then we are not going to set up any of these

and then we'll just click on create topic.

So my first topic is created

and as we can see right now, we have zero subscriptions.

So we need to create our first subscription.

So I'm going to create one and winters sort protocol.

So it could be Kinesis Data Firehose, SQS,

Lambda, email, email, Jason HTTP, HTTPS and SMS, okay?

And you have to remember those going into the exempt

but to make it very simple, we're first going to use email

and actually only going to use email in this hands-on.

Now we need to use an endpoint.

So an email address

I will use stephantheteacher@mailinator.com

And this is just a service for me to get a temporary email.

So if I type Stephantheteacher and press on go,

then I'm getting a public inbox

and that will receive emails from this address, okay?

So we're going to create this.

As we can see right here,

we could set up a subscription filter policy.

This is optional, but with this policy

we could filter the messages that will be sent

to the subscription, which can be really helpful.

If you have many subscribers

there's just needs to get only a subsets of the messages

sent into your sq or your SNS topic

but we will not set it up right now.

So we'll create this subscription

and now we need to validate the subscription.

So as we can see right now, it is pending confirmation.

And so to confirm it, I'm going to go

into my mailinator and I've received an email.

And by clicking on this confirm subscription

I'm going to confirm a subscription.

So here we go.

And now if I refresh this page, what I should be seeing

is that my subscription right here is confirmed.

So this is perfect.

So and again, if I click on my subscription,

I can look at it,

see that is going to send an email to this end point.

And if I wanted to do it

I could have a subscription filter policy

but right now we don't have any

because we want all messages send to my SNS topic

to go there directly into the subscription.

So now let's do a test.

We're going to publish a message.

And I'm going to just enter a message structure.

I'll say hello world which is very common

when we test some services and then publish the message.

So the message has been published into my first topic.

And so what I should be seeing

is that if I go back to my emails

and go to my public messages

so back to my inbox, I should be seeing yes

an AWS notification message coming straight from SNS

saying hello world.

So they're easy, very cool.

And we just show that SNS is working for us.

So this is perfect, we're good to go.

If we wanted to implement the SQS fan-out pattern

we would need to choose SQS and set up

many, many different cues as the receivers

of the subscription for our SNS topic.

So, yep, that's it for SNS.

When you're done, delete the subscription

and then go back to the topic on the left hand side

and then click on delete

to delete the topic by tapping delete me.

And if you go, that's it for SNS

I hope you liked it and I will see you in the next lecture.