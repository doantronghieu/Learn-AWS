# RDS

So let's get started

with an overview of AWS RDS.

RDS stands for Relational Database Service,

and what it means is that it's a managed database service

for a database that use SQL as a query language.

So SQL is a structured language to query a database.

It's very well-adapted, and it's running on many engines.

So it allows you to create databases

through RDS service in the cloud,

and these databases will be managed by AWS,

and you get a lot of benefits from it.

So what types of database engine are managed by AWS?

Well, the first one is PostgreSQL,

then we have MySQL, MariaDB, Oracle,

Microsoft SQL Server, IBM DB2, and Aurora,

which is a proprietary database from AWS

that we'll study in depth.

So you have to remember the types of engines

that are supported by Amazon RDS.

So why would we use RDS

versus deploying our own database service

on top of, say, an EC2 instance?

Because this is possible.

Well, RDS is a managed service,

and as such, AWS provides a lot of services

on top of just giving us a database.

For example, the provisioning

of the database is fully automated

and so is the underlying operating system patching.

There is continuous backups being made,

and you are able to restore to a specific timestamp.

It's called Point in Time Restore.

You can also have monitoring dashboards

to view the performance of your database.

You can have read replicas,

and we have a dedicated lecture

on read replicas in this course.

To improve read performance, you can set up a Multi AZ,

and so we do have also sections on Multi AZ

that will be helpful for disaster recovery.

You have maintenance windows for the upgrades,

and you have scaling capabilities,

both vertical by increasing the instance type

and horizontal by adding read replicas.

Filing the storage is backed by EBS,

so this is something we already know,

which is gp2 volumes or io1.

But the only thing we do not have is we cannot SSH

into the instances, the RDS instances.

So because this is a managed service,

AWS provides us a service,

and we don't have access to the underlying EC2 instance.

But this is not too bad

because we get all these things

that we would have to set up on our own

if we wanted to deploy our own database engine on EC2.

So here is one feature that can come up in the exam

and is around RDS Storage Auto Scaling.

So the idea is that when you create an RDS database,

you need to say how much storage you want.

For example, you want 20 gigabytes of storage.

But say you are using your database a lot,

and you're about to run out of free space,

then with this feature enabled,

the RDS Storage Auto Scaling,

RDS will detect that

and will scale automatically the storage for you,

so you don't have to do any kind of operations,

such as taking down database to increase the storage.

So the idea is that your application

does a lot of read and writes to your RDS database

and then automatically,

with some threshold we'll see in a second,

then the storage can auto scale.

And that is a feature of RDS.

That is a very, very nice feature.

So this always meant to make you avoid

the operation of scaling manually your database storage.

For this, you need to set a maximum storage threshold,

so maximum limits for how much you want the storage to grow

'cause you don't want it to grow infinitely, maybe.

And you can automatically modify storage

if the free storage is less than 10%

of what has been allocated,

and the low storage has been lasting

for more than five minutes,

and six hours have passed since the last modification.

If that's the case,

then the storage will auto increase when you enable it.

This is very helpful for applications

that have an unpredictable workload.

And this supports all database engines for RDS.

So that's it for this lecture.

I hope you liked it,

and I will see you in the next lecture.

# RDS Read Replicas vs Multi AZ

Going into the exam

is going to be extremely important

to understand the difference between RDS Read Replicas

and Multi AZ and understand exactly the use cases for those.

So this lecture is really dedicated

to understanding Read Replicas and Multi AZ.

So let's get started with the Read Replicas.

Read Replicas as the name indicates

help you to scale your reads.

So let's have an example.

Here, we have our application

and we have an RDS database instance

and our application performs reads and writes

to our database instance,

but say we want to scale the reads

because that's, main database instance can not scale enough.

It receives too many requests.

Well, we can create up to 15 Read Replicas

and they can be within the same availability zone,

cross availability zone, or cross region.

So three different options

and they're very important to remember.

So say we have another RDS instance Read Replica

and another one and what will happen

is that they will be an asynchronous replication

between the main RDS database instance

and the two Read Replicas.

Asynchronous, that means that the reads

are eventually consistent.

What that means is that,

for example, if your application reads from the Read Replica

before they had the chance to replicate the data

then you may get all data.

And this is why it's called

eventually consistent asynchronous replication.

And these replicas, they can be awesome

for reading for scaling reads

but they can also be promoted to their own database.

So you can take one of these replicas

and say, okay I want it to be its own database now

and take rights.

And so you promote it to its own database.

It's completely out of the replication mechanism after that

but it's lives and has its own life cycle afterwards.

So in case you wanna use Read Replicas,

the main application in orange in the top of the screen

must update the connection string

to leverage the list of all the Read Replicas

you have in your RDS cluster.

Okay, very nice.

So let's talk about a classic use case

for you to Read Replica.

So in this example, we have a production database

and it is taking on normal load.

So here we go.

Our production database is having read and writes

to our main RDS database instance.

And the new team comes in and say,

we want to run some reporting

and some analytics on top of your data.

And so if you plug in that reporting application

onto the main RDS database instance

then it's going to overload it

and possibly slow down the production application

and you don't want that.

So instead what you do as a solutions architect

is you create a Read Replica to run the new workload there.

So you create a Read Replica.

There is some asynchronous, a replication

that happens between your main RDS DB database instance

and your Read Replica

and then your reporting application can just do reads

from your Read Replica and run the analytics there.

The production application is completely unaffected

in this case and that's perfect.

So remember, if you have a Read Replica

you need to ensure

that it is only for SELECT type of statements

and SELECT is a SQL keyword.

SELECT means read.

And so you can not use keywords

such as INSERT, UPDATE or DELETE,

which change database itself.

Okay, Read Replicas is only for reads.

So, let's talk about the networking cost

associated with RDS Read Replica.

So in AWS, you should know that's normally there is a cost

when the data goes from one availability zone to another

but there are exceptions

and these exceptions are usually for managed services.

So for RDS Read Replica, this is a managed service.

If your Read Replica is within the same region, okay?

Different AZ, but same region, you're not paying that fee.

So what this means that if you have a RDS DB instance

in us-east-1a and then a Read Replica in us-east-1b,

and there is asynchronous replication

because this is a Read Replica,

even though the traffic goes from one AZ to a different AZ

that replication traffic is going to be free

because RDS is a managed service

and they give you that traffic for free.

But if you are using a cross region replica,

so you are in one region, us-east-1

and you go to another region, eu-west-1, for example

then your RDS DB instance and your Read Replica

will have replication that will go across regions

and this will incur a replication fee for your network.

Finally, let's talk about RDS Multi AZ

and Multi AZ is mainly used for Disaster Recovery.

So we have our application

and it performs the reads and writes

to our Master database instance

which is in availability zone A

and what we thinks you have is a synchronous replication

to a standby instance in AZ B,

and they will replicate every single change

in the Master synchronously.

So that means that when your application writes

to the Master, that change needs to also be replicated

to the standby to be accepted.

And so what we get out of it is one DNS name.

So your application talks to one DNS name

and in case there is a problem with the Master,

there will be an automatic failover to the standby database.

Thanks to that one DNS name.

So thanks to this, we increase the availability.

This is why it's called Multi AZ and they will be failover

in case we lose an entire AZ or we lose the network

or there is an instance or storage failure

for the Master database.

In which case, obviously the standby database

will become the new Master.

He don't need to do any manual intervention in your apps

as long as it tries to keep on connecting

to your database automatically at some point,

it will fail over to the standby

that will be promoted as the Master, and you'll be good

and it's not used for scaling.

So as you can see here,

the standby database is just for standby.

No one can read to it.

No one can write to it, it's just here as a failover

in case anything goes on with your Master database.

So, quick question is, is there a possibility

to have the Read Replicas being set up as Multi AZ

for Disaster Recovery?

And the answer is yes, you can set up your Read Replica

as a Multi AZ if you want it to.

And that is a common exam question, okay?

So that's it for the difference between Read Replicates

and Multi AZ, but you need to absolutely understand this

going into the exam

because a lot of questions will go and be about it.

So a question that can come up in the exam

is around how do we make an RDS database

go from Single AZ to Multi AZ?

So what you should know

is that it is a zero downtime operation.

That means you do not need to stop the database

to go from Single AZ to Multi AZ.

The only thing you need to do

is to click on modify for the database

and enable Multi AZ.

That means that your RDS database instance

is going to go to have a Master,

to have a standby DB with synchronous replication

without you doing anything except modifying that setting

and the database will not stop.

Now, this is what the exam will ask you

but I wanna show you what will happen behind the scenes

for it to work.

So, the following will happen internally.

There will be a snapshot taken by RDS automatically

of your main database

and that this snapshot will be restored

into a new standby database, okay?

And then once the standby database is restored,

there will be synchronization established

between the two database

and so therefore the standby database

will catch up to the main RDS database and there you go,

you will be in a Multi AZ setup.

So that's it for this lecture.

I hope you liked it,

and I will see you in the next lecture.

# Hands on

So now let's go ahead and create

our first Amazon RDS database instance.

So on Databases on the left-hand side,

you can just click on Create database.

Okay, so when we are on the screen

we have to select the database engine.

So we have six engines types,

and we have two database creation methods,

would be standard create or easy create.

Because I wanna show you all the options,

we're going to choose standard create

which is going to be longer

but we'll show you all you need to know for the exam.

Now for the engine options,

we have Aurora that we'll deal with later on,

MySQL, MariaDB, PostgreSQL, Oracle,

and Microsoft SQL Server.

For simply sake, right now I'm just going to use MySQL

and go down with it.

We going to use the version

that is provided right here, MySQL 8.0.28

but whatever is the first selected is good enough for you.

Next, we have templates to meet our use case.

So if you wanted to have a free tier setup,

you would click here

and this would pre-select some options for the free tiers,

or if you had a dev test environment,

then it would pre select option for dev test,

and production, you have full control over every option.

Now I'm going to use production as a template

but we'll modify every option to be within the free tier

but I'm showing you this so that we can have a look

at all the options one by one.

So first for availability and durability.

We have three options.

We have Single DB instance, Multi-AZ or Multi-AZ DB Cluster.

So, because we want to remain within the free tier,

we're going to use Single DB instance

but if you want to have a standby database instance,

you would use a Multi-AZ type of option.

Now for the DB identifier, we're going to use database-1.

The credential is admin

and the password I'm going to use,

a password here that I'm just going to enter as we go.

Okay, next for the instance configuration,

this is the size of the underlying EC2 instance.

So in that case, we can have standard classes

or memory optimized classes or burstable classes.

And within it, you can choose whatever instance

that you want with different characteristics.

Now to remain within the free tier,

I'm going to use a burstable class.

I will include previous generation classes

and choose db.t2.micro, which is within the free tier.

Now for storage type, if you are in production,

you're going to use an Io1 type of EBS volume,

but as we run within the free tier,

I wanna use a gp2 type of volume,

which is lower performance.

And we'll use, maybe 10, 20 gigabytes of allocated storage.

Now we can also enable storage autoscaling

which will automatically increase

the size of the EBS volume

in case we are starting to near a threshold.

And what is the maximum amount of storage we want

in case we enable autoscaling, let's say 1000 gigabytes.

Now for connectivity, we have the option

to connect what was called an EC2 compute resource.

So this is in case you wanted to make sure

that there is connectivity

between a specified EC2 instance and your RDS database.

You would just choose it in this list.

And then the configuration in terms of networking

will be done automatically.

So you don't have to handle security groups

et cetera, cetera,

which is very helpful when you're a beginner.

But we're going to look at all the options.

So I'm going to say don't connect

to an EC2 compute resource.

Therefore we have to deploy in a specified VPC

and then we have to specify a subnet group

and then whether or not we want public access

to the database.

So I'm going to say yes

because I want to access this database from my own computer.

Next, we need to choose or to create a security group.

So I'm going to create a new security group.

And the name is going to be demo-database-mysql.

In terms of AZ preference, we could set one, but no need.

And as you can see, the port to connect to the database

on MySQL is 3306.

In terms of database authentication,

we have three mechanism.

The first one is to a username and password,

this is what we'll be using,

but we can also enable IAM database authentication

to have IAM users and roles directly access RDS,

or we can enable Kerberos,

but right now I'm going to leave it

as password authentication.

We can enable monitoring

and enhance monitoring gives you a 60 second granularity

on your resources, but I can disable it right now.

And we can specify some additional database configuration.

So for the initial database name,

I'm just going to enter mydb.

Then we can enable or disable backups.

So backups are automated

and we can have a backup retention period of 1 to 35 days.

And if I said zero

then it will just completely disable them.

So let's leave it at seven.

And then for backup window,

we can choose a specific time window

where the backups will be done, or no preference.

Then we can export the logs into CloudWatch Logs.

For example, you can export the audit log

from RDS into CloudWatch Logs for long-term retention.

Then do we want to have a maintenance window

for the minor version upgrades?

And if so, what is a window you want have?

And do you want to have deletion protection?

This is to protect the database

from being accidentally deleted.

So now, as you can see we have some DB cost of $17 per month

even though I told you this is within the free tier.

So it's not reflected right here,

but if you use a db.t2.micro type,

then you will have a free tier for this

even though it says here 17.34 US dollars.

So when you're done, just create this database.

So while my database is being created,

let's go ahead and download SQL Electron.

And this is a SQL clients

that we're going to use to connect to our database.

So very simple, you're going to click on Download GUI

and then click on it,

take the latest version for whatever platform you have.

So you have latest Windows

and then for Mac is going to be a DMG.

So I'm gonna do this one,

then open it and install it.

Okay, so my database is now created,

took a little bit of time.

And now, cause we can see it is available.

And so what I'm going to show you are a few options.

So first of all, we have the endpoint right here

and the port 3306,

and it's linked to this security group,

and this security group if you click on it

and look at the inbound rules,

we can see that we have an inbound rule here

on TCP port 3306.

So that's great.

Coming from just my IP address.

Okay.

So you should course modify this security group

if you have problem connecting to your database instance

to maybe have it to anywhere IPv4.

Okay, so now let's take this endpoint

and we're going to connect to it using SQL Electron.

So using SQL Electron I'm going to add a new database,

I'll call it RDSDemo.

It's a database of type MySQL.

And then for the server address,

I'm going to enter what I have right here on port 3306.

The user is admin and the password for me was password.

And then the initial database is mydb

as I entered it from before.

Let's click on Test

and the connection is successful.

If it's not successful, please have a look whether or not

your database was set to be a public database number one,

and number two, have a look at your security group settings

to make sure that your IP is allowed in.

So let's save this and connect your database.

And now I am connected into my database directly to mydb

which was the database that was created.

And in here I could go ahead

and enter some create table statements.

So CREATE TABLE mytable,

and then just a name of VARCHAR 20

and first name of VARCHAR 20.

So it's just a very quick statement,

just to show you how SQL works,

but this is definitely out of scope for the exam.

Execute this.

So now we have mytable that has been created

and then we don't have any content in it.

But you could have an insert statement

to insert some data into your table.

So you would say, for example, enter the value maarek

and then the value here, Stephan.

Execute this.

And then if you click on select throws,

then you see that my table has my name

and my first name to be maarek and Stephan.

So this is how you would use a RDS database with MySQL,

but again, out scope of the exam,

I just wanted to show you the full picture

of using SQL Electron.

So back in here, my RDS database is fully managed.

So this is great. We can use it.

This is amazing.

Other things we can do that are worthy

are to create a read replica

directly from this database

so we can create a read replica.

And then this read replica would allow us

to have more read capacity for our database

which would be very, very helpful.

And we want whether or not that database

to be Multi-AZ for recovery purposes.

So I'll keep it as No and cancel it next.

We can have a look at monitoring

and monitoring for example show us the CPU utilization.

And as we can see while the utilization is monitored

by my database, and we can monitor this,

for example, for scaling our database

if in case we have too many connections into it.

We can have a look

at the database connection accounts as well

to see how many clients are connected into our database,

and a lot of metrics overall.

Other things we can do with RDS is around creating snapshot.

So you can take a snapshot and this will snapshot database

and you can restore it wherever you want.

You can restore to a point in time for your database

or you can even migrate a snapshot

if you wanted to migrate a snapshot

into a different region, for example.

So all these are a bunch of options that we can use

but as we can see, the whole power of RDS

is to manage the database for us to have read replicas,

Multi-AZ, we can increase the instant type

as we go along and so on.

And that's all comes very handy

from a managed service perspective.

So you've seen all you need to know for your RDS database.

I hope you liked it.

And just to finish yourself,

please make sure to delete the database.

So to delete it, first you need to remove

the termination protection.

So you go to modify

and then at the very bottom, you will scroll down

and find the delete protection setting.

So here it is.

We'll disable it.

Press Continue.

And then Apply immediately.

And then once the delete protection is done,

you can go ahead and delete this database.

You can remove creating your final snapshots

and then say delete me

and acknowledge the fact that upon deletion

everything will be lost.

Click on Delete.

And you're good to go.

So that's it for this lecture.

I hope you liked it.

And I will see you in the next lecture.

# RDS Proxy

So now, let's talk Amazon RDS Proxy.

So we know we can deploy our RDS database within our VPC,

but now we can also deploy

a fully managed database proxy for RDS.

So you may say,

"Okay, we can access our RDS database directly.

Why do we need a proxy to access our database?"

Well, if you use an As an RDS Proxy,

this will allow you, your application,

to pool and share the database connections

established with the database.

So instead of having every single application

connect to your RDS database instance,

they will be instead connecting to the proxy,

and the proxy will pool these connections together

into less connections to the RDS database instance.

So why may you do this?

Well, this makes a lot of sense

if you have a lot of connections

into your RDS database instance,

and it's going to improve your database efficiency

by reducing the stress on database resources,

for example, CPU and RAM,

and also minimize the open connections

and the timeouts into your database.

So that's one thing you need to look out for

from the exam perspective.

Now, as I said, the RDS Proxy is fully serverless.

It's auto scaling, so you don't need to manage its capacity.

And it's highly available.

It's across multiple AZ.

And therefore, in case, for example,

there is a failover that happens

on your RDS database instance.

For example, it goes from the primary instance

to the standby instance,

then it will, thanks to the RDS Proxy,

reduce the failover time by up to 66%.

So this is true for RDS and Aurora.

So again, instead of having all your applications

connect to the main RDS database instance

and then handle the feller themselves,

they will just connect to the RDS Proxy,

which does not know any failover.

And the RDS Proxy will, itself,

handle the failover of the RDS database instance,

therefore improving your failover time.

So something else you need to look for

from an exam perspective.

So the RDS Proxy supports MySQL, PostgreSQL, MariaDB,

Microsoft SQL Server,

as well as Aurora for MySQL and PostgreSQL.

It doesn't require you

to do any code change in your application.

Just instead of connecting to your RDS database instance

or your Aurora database,

you'd now just connect to your RDS Proxy and you are done.

On top of it,

there's a third advantage to using an RDS Proxy.

It is to enforce IAM authentication for your database.

So to make sure that people

can only connect to your RDS database instance using IAM.

And then these credentials

can be securely stored in another service

called the AWS Secrets Manager.

So again, if you need to see a way

to enforce IAM authentication for your database,

think RDS Proxy.

And finally, the RDS Proxy is never publicly accessible.

So it's only accessible from within your VPC.

So you cannot connect over the internet to your RDS Proxy,

which is enhanced security.

And so one service we haven't seen

that is going for sure to be very helped by the RDS Proxy

is called the Lambda functions.

And the Lambda functions, they will execute pieces of code.

We'll see them later on in this course.

Okay, you don't need to know them right now,

but we have to tackle them right now

because of the RDS Proxy feature.

And so the Lambda functions, they can multiply,

multiply many, many times.

And they will appear and disappear very, very fast.

And therefore, imagine you have 100

or 1,000 Lambda functions appearing and disappearing

just like that, and opening up connections

into your RDS database instance, they will be a big problem

because it will leave open connections and timeouts,

and it will be a mess.

And therefore what you do is that you use the RDS Proxy

to pool connections for your Lambda functions,

and then the Lambda functions will overload the RDS Proxy,

but it's meant to be overload.

And the RDS Proxy will pool these connections

into less connections to the RDS database instance,

thus, solving your problems, okay?

So that's it for this lecture. I hope you liked it.

And don't worry, we'll review the proxy once again

once we go into the Lambda lectures.

But again, RDS Proxy is used to minimize

and pool connections on your RDS database instance.

It's also used to minimize failover time

and reduce it by up to 66%.

And also, it's used to enforce IAM authentication

for your database and to securely store its credentials

in the Secrets Manager service.

All right, that's it. I hope you liked it.

And I will see you in the next lecture.

