# CloudWatch Metrics.

Okay, so we've seen CloudWatch

throughout the course,

but let's just go and do a quick summary on it.

So first CloudWatch metrics,

it's going to provide metrics for every service in AWS,

and you need to understand what the metric means.

So usually the name of the metric gives you

a pretty good indication of what it is.

For example, CPU Utilization, NetworkIn,

and then based on how the metric is behaving,

it gives you an idea of how the service is behaving,

and you can do some troubleshooting based on this.

So metrics belong to namespaces,

and then you have a dimension,

which is an attribute of a metric,

for example, instance id, environments,

et cetera, et cetera,

and you can choose up to 30 dimensions per metric.

Metrics will have timestamps,

and you can create CloudWatch dashboards of metrics.

So in this course we've seen EC2 metrics for example,

and we also seen the EC2 detailed monitoring.

So we know that by default EC2 instances will have

metrics every five minutes,

but if you enable detailed monitoring for a cost,

it's additional,

then you're going to get data of metrics every one minute.

And if you enable this, then for example,

you're going to be able to react faster to changing metrics

for your EC2 instances and it gives you some benefits for

your ASG, if you want to scale out and in faster.

Now, the feature allows you to get 10

detailed monitoring metrics.

And the thing to note is that the Institute memory usage,

so your Ram, is not pushed by default and needs to be pushed

from the instance as a custom metric.

And we'll have a look at how to push custom metrics

very, very soon.

So when you are in the CloudWatch dashboard

on the left hand side,

there is metrics and you can find all the metrics.

And as you can see,

we see all the namespaces in here for our metrics.

If we have a look, we have based on services, for example,

ELB auto-scaling EBS, EC2, EFS and so on.

So a lot of information given you given to you here,

so we can click on EC2,

And we can have a per instance metric,

just to see one metric and I'm going to type credits

to see the CPU credit balance.

For example, I will take this instance,

which was created a long time ago.

And then what I'm going to do is I'm going to choose a

custom range,

which is going to be a one month to find some data in here.

Okay, so we have the data here.

And so the cool thing in CloudWatch metrics

is that you can just click

and select the time span you want.

And here we go,

we're getting some information around our metrics.

As you can see, we get metrics every five minutes here.

So every data point is every five minutes because detailed

monitoring was not enabled for this instance, okay.

But if I did enable detailed monitoring,

I would get data every one minutes.

So this is just the basics of quality metrics and nothing

too fancy, but we can definitely filter by time.

We can view it as a different lines or stacked area or line

or number or a pie chart. You can add it to a dashboard.

You can download as a CSV, you can share it.

Okay, So cloud metric is very, very handy.

And you can have a look at all the metrics, you know,

based on the region you want,

based on the dimension you want,

the resource you want, so you can filter everything.

So that's it for closure metrics.

I hope you liked it. And I will see you in the next lecture.

# CloudWatch Custom Metrics.

So all the metrics we've seen

so far in this course are metrics

taken directly from the inner services that we have

enabled by default,

but there is a way for you to get custom metrics for

CloudWatch, and this is choose,

you can define your own custom metrics.

For example, you wanted to push the memory usage for the RAM

to CloudWatch or the disk base.

So the number of login user for your application for this,

you would use an API call named PutMetricData.

You can add dimensions or attributes

to your segment metrics.

For example, instance.id, environment.name,

whatever you want really.

It's up to you to name it however you want.

And then you can specify a metric resolution with a storage

resolution, API parameter with two possible values.

So either it's a standard custom metric and you can push a

metric every one minute.

So 60 seconds.

Or it can enable very high resolution.

In which case you can enable to push metrics

every one, five, 10, or 30 seconds, okay.

Something good to know is that with custom metrics,

when you push a metric in the past or in the future,

this works as well.

So this is a very important exam point.

So if you are pushing a metric up to two weeks in the past

or two hours in the future,

you're not going to get an error from CloudWatch, okay.

This is going to accept your metric as is.

And so that means you need to make sure that your

EC2 instance time is currently configured.

If you want the metrics to be synchronized with the actual

time from AWS.

So let's push a custom metric.

And for this, I went to the documentation into CloudWatch,

put metric data.

This is a CLI documentation,

and this shows you how to push a metric into CloudWatch.

So I'm not going to read the documentation.

You can have a look at all the parameters in here, okay.

But very important timestamp can be specified.

And so you can specify a timestamp up to two weeks in the

past and two hours in the future.

So very, very important.

Then you can specify the data,

the name of the value of the units, the value,

and so on dimensions, as well as the storage resolution,

if you want it to get a high resolution metric

or a standard resolution, okay.

So what I'm going to do is just push a very custom example.

So at the end there's examples,

and you can use a metrics of JS file to push a metric like

this, if you want it to, and then use this API call,

or if you want it to go even quicker,

you can just use one API command to specify the value of

your metric, the unit, the bytes,

as well as instance ID instance type and so on.

And so let me take this command right here,

and we're going to open the CloudShell utility

to push that metric,

Okay, so CloudShell is launched

and I'm going to paste the command in and then press enter.

So this is going to push a custom metric into CloudWatch.

Now you have to imagine that if this is done from an

institute instance with a script, for example,

you can push any metric regularly.

Right now I'm just pushing one data point using the CLI into

CloudWatch, which is quite empty already, okay.

And if you know, the unified agent for CloudWatch,

what it does is that it does use this put metric data API

call to push metrics into CloudWatch regularly.

So when this is pushed,

we have pushed a new namespace named MyNameSpace.

And so that means that if I go back to my CloudWatch metrics

and refresh this,

I need to clear my graph.

And then I'm just going to go out of the service.

And going back to the service is going to be easier,

then go to all metrics.

And as you can see, we have a custom namespace

that has been created right here.

So all of those before where namespaces credited by AWS,

but now we have a namespace created by us.

And so in it we have two dimensions instance ID and

instance type,

and these represents the same instance ID and instance type

dimensions that were specified in the command.

So this is up to you to define these dimensions,

obviously, then you click on it and you can see the instance

ID, the instance type and the metric name buffers.

And if I click on it now, we don't see much because, well,

we don't have much,

but there's one data point in here that has been created,

okay, and this is part of my custom metric.

So that's, it, it's quite easy.

You can see how to create custom metrics,

very easily using an API call.

So I hope you liked it.

And I will see you in the next lecture.

