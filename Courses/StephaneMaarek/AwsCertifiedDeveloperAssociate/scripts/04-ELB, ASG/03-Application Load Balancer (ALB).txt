Now, let's get into the second kind

of load balancers we'll see

is the application load balancer.

So it's a layer seven only load balancer.

So that means HTTP.

And it allows you to route

to multiple HTTP applications across machines.

And these machines are going to be grouped

in something called a target group.

And it will make a lot of sense

once we get into the hands-on.

It allows you to load balance

to multiple applications on the same EC2 instance.

So using containers and using ECS as we'll see.

And it has support for HTTP/2 and WebSockets.

It supports redirect as well.

So if you want it to redirect traffic

from HTTP to HTTPS automatically,

it could be done at the load balancer level.

It also supports route routing.

So there's routing based on different target groups.

For example, you can route based

on the target path of your URL.

For example, example.com/users and example.com/posts.

/users and /posts are different routes in your URL,

different path, and so you can redirect

these two things into different target groups.

We'll see what that means in a second.

You can also do routing based on the host name of the URL.

So if your load balancer is accessed using

one.example.com or other.example.com,

it could be routed to different target groups,

and you could also be routing based on

the query strings and headers.

So for example, example.com/reserves

and id=123&order=false could be routed

to a different target group.

So ALB, and this is the short for

application load balancers,

they're great when you have micro services

and container-based application.

So as soon as we'll go into learning what docker is

and Amazon ECS, ALB are going to be

the go-to load balancers,

because they have a port mapping features,

which allows you to redirect to a dynamic port

on the ECS instance, and again,

more on that directly into the ECS section.

And in comparison, if we want it to have

multiple applications, okay,

behind multiple, behind a classic load balancer,

we would have to have multiple classic load balancer.

We need to actually have one per application,

whereas with load balancers, we're able to have

one application load balancer in front of many applications.

So maybe a graph will help.

So we have our external application load balancer.

It's public facing, and behind it,

we have our first target group made of EC2 instances.

And this one is going to be routing for the route /user.

And we have a second target group

made of EC2 instances again,

and this one is going to be our search application,

and there's going to be a health check as well with it.

And it's going to be routed through rules

for the /search routes.

So as you can see here, we have two independent

microservices that do different things.

The first one is the user application.

The second one is a search application.

But they're behind the same application load balancer,

which knows how to intelligently route

to these target groups based on the route

that is being used in the URL.

So the target groups, what are they?

The first one is that they can be EC2 instances,

and they can be managed as we'll see very, very soon.

They can be managed by Auto Scaling Group.

It could be ECS tasks

and we'll see this in the ECS section.

It could be Lambda functions,

and this is something that's not very known.

So application load balancers can be in front

of lambda functions, and we'll see what

Lambda functions are in the future section,

but they're the base of everything

called serverless in AWS.

And finally, it can be a front to IP addresses,

and they must be private IP addresses.

So ALB can route to multiple target groups,

and the health checks are going to be done

at the target group level.

So let's take another example.

And we have an ALB and we have two target groups.

The first one is based on AWS with EC2 instances,

and the second one is going to have

private servers on premises, so in our own data center.

And so for the target groups, you'd be able to exist.

We need to specify the private IP of our servers

into the target group, choose for them to be registered.

And now say we have an application

that is serving as request through the ALB.

And what we want is to send the first

to the first target group on the mobile-based traffic,

and to the second target group on the desktop-based traffic.

For this, we can use, for example,

a query string or parameters routing.

So if, in the URL that the clients are trying to use,

there is a ?Platform=Mobile,

we can write a rule in the ALB redirection rules,

the routing rules, to redirect to the first target group.

And if you have ?Platform=Desktop,

so this is a query string or parameter,

then we can say it to redirect

to the target group number two.

I don't know where you would do this,

but this is just an example I'm providing you, okay?

So good to know before we go into the hands-on,

the first one is that you also get a fixed host name

with your application load balancers,

just like the classic one.

The application servers don't see the IP

of the client directly.

The true IP of the clients is going to be inserted

instead in the header called X-Forwarded-For.

And so you can also get the port using X-Forwarded-Ports

and the protocol used, being used,

using X-Forwarded-Proto.

And so what that means is that our client IP,

which is 12.34.56.78 is directly talking

to our load balancer, which performs something

called a connection termination.

And when your load balancer talks to your EC2 instance,

it's going to use the load balancer IP,

which is a private IP into your EC2 instance.

And so for the EC2 instance to know the client IP,

it will have to look at these extra headers

in your HTTP request, which are called

X-Forwarded-Port and Proto.

All right, that's it.

Now, let's go into the hands-on,

and create our first application load balancer.

So we are going to practice launching

a load balancer, but first,

we need to send traffic to something.

So first we're going to launch EC2 Instances.

So I'm gonna go into launch instances

and I will launch two instances.

So on the right hand side I can say two instances

and the name's going to be My First Instance.

We'll rename the second one when it comes to it.

We're going to use Amazon Linux 2 on this architecture.

We're going to use a t2.micro,

and then we are going to proceed

without a key pair because we don't need SSH capability.

We can use EC2 Instance Connect if we ever need to.

Then for network settings

we can select an existing security group

and we will use the Launch Wizard 1 security group

which allowed us to do HTTP traffic

and SSH traffic into our EC2 instance.

So that's perfect.

We're going to use the basic storage

and for advanced details, I will scroll down

and I will add some EC2 user data,

and to do so I'm going to copy what I have here

and paste it here.

So this will just launch the EC2 instances

the same way we've launched them before

using this EC2 user data script.

So let's launch our two instances

and now we're going to view all instances.

So I'm going to rename the second one

My Second Instance and save.

So let's wait for these instances to be ready.

So my EC2 instances are now ready.

I'm going to copy the first IPv4 address and paste it,

and I will visit the URL

and as you can see, I get a hello world from my instance

so this is great.

And then I'm gonna go to my second instance right here.

I will copy again the IPv4 and then paste it, press enter,

and I get a hello world again.

So as you can see, two instances give us two hello worlds,

and the last part is changing.

And so what we'd like to do is to have only one URL

to access these two EC2 instances

and balance the load between them.

So for this of course, we're going to use a load balancer.

So let's scroll down and look at load balancers.

And here you can create a load balancer.

So we have different load balancer types,

and in this demo we're going to only look

at the application balancer, but you need to

understand the difference between the ALB,

the network load balancer, and the gateway load balancer.

So for the application of balancer,

you can see here it is for HTTP

and HTTPS kind of traffic.

For the network load balancer it's going to be on the TCP

and UDP protocol or TLS over TCP.

And this is something you going to use

when you need ultra high performance.

That means millions of requests per second

while maintaining ultra low latency.

So this is a very high performance load balancer, this one.

And then finally the gateway load balancer right here,

as you can see, it's used for security,

for intrusion detection, for firewalls and so on.

So it's to analyze the network traffic.

When it goes to the classic load balancer,

by the time you watch this video, this may be gone

because the classic load balancer is going away

and so therefore I'm not going to discuss it and touch it.

Okay, so let's focus on creating

the application load balancer.

So I'm going to call this one DemoALB.

And if you wanted to read about how load balancing works,

you can read it here,

but hopefully the previous lecture was enough for you.

So this scheme is internet facing

and the address type is IPv4.

For network mapping, we we need to decide where

to deploy the load balancer and how many availability zones.

So let's deploy it in all of them.

Great, and then we need to assign a security group

to our load balancer.

So it turns out that I'm going to create

a new security group for it

and we need to only allow HTTP traffic.

So I'll call it demo-sg-load-balancer.

Allow HTTP into load balancer, into ALB,

and the inbound rules

is going to allow all HTTP from anywhere.

Okay, and the outbound rules are fine.

Let's create this security group.

So it is now created

and I can go back in here, refresh this page,

choose my demo-sg-load-balancer

and remove the default security group

so that I'm only left with one security group.

So let's scroll down.

And we are under listeners and routing.

And so we need to route the traffic

from SHTTP on port 80 to a target group.

And a target group is nothing more

than a group of my EC2 instances that were created.

So for this we need to create a target group.

So let's click here to create one.

And the basic configuration tells us that we want

to group instances together,

but you can see you have other options.

So we want to group instances together

and I'll call this one demo-tg-alb.

The protocol is HTTP on port 80.

You have different options, but based on the option

you choose, it's going to be a target group

for a different kind of load balancer.

So we'll keep it as HTTP on port 80, the version

of HTTP is 1 so we'll keep it as 1.

The health check is good.

And then let's click on next.

And then we need to register our targets.

So we're going to register both EC2 instances on port 80,

and let's include them as spending below.

So now my instances are registered

and let's create this target group.

So it's created, and now I need to refresh my page

and actually I had created one before

so the one I wanna use is demo-tg-alb.

So this target group is created

and it's linked to the listener

on my load balancer on port 80.

So now I'm good to go

and I can go ahead and create my load balancer.

So I'm going to click on view load balancer,

and I'm back into this page

where I can have a look at my load balancer.

And right now it is in the provisioning space

so we need to wait until it is provisioned.

So my ALB is now active, it's ready.

And as you can see, there's a DNS name available for me.

So I'm going to copy this, paste it in a new tab

and through the application load balancer

I'm able to get a hello world.

But the cool thing about it is

that if I refresh this page

and keep on refreshing it,

then as you can see the target is changing.

That's because my application load balancer

is actually redirecting between both my EC2 instances,

which is very cool.

And that's the proof

that load balancing is actually happening.

How do we know?

Well, if we go to our target group, this one,

and we look at the targets of my target group,

as you can see they're both healthy.

That means that the application load balancer

through the target group is going to send traffic

to both of them, one after the other.

And the target group is very smart

because if I take my first instance for example

and I stop it,

through this, what we're doing

is that we're stopping our two instance

and so therefore it's going to be unhealthy

because it cannot respond anymore to the traffic coming in.

And so if I go in my target group,

maybe I'm too fast, let's see,

and refresh, so I will wait about 30 seconds.

And now as you can see

the first instance is unused because it's in stopped states.

And so therefore, if I go back

to my applicational balancer

and refresh, the only response I'm getting

for this instance is that one instance

that is still up and running.

This is the power of using load balancers

because they know when the targets are healthy

or not healthy.

And so this instance is stopped,

but of course if I recover it, if I start it again

then it's going to boot up

and is going to create the service behind the scenes.

And so let's wait for the instance to be started

and hopefully we'll see it again

as being healthy in our target group.

The instance is now up

and we are in the initial health status as you can see

and now we are in a healthy status.

So the instance was deemed healthy

and so therefore if I go back

to my application balancer and refresh, as you can see now,

the hello world is coming from both instances.

So that's it, we've practiced load balancer,

we created one as well as two targets in the target group.

I hope you liked it, and I will see you in the next lecture.

So let's have a look

at a few more advanced concepts for our load balancer.

Number one is around network security.

So currently we access this load balancer

through a security group here.

This is my load balancer security group.

And then we access our EC2 instances

through their own security group.

So right now if I look at the public IP and access it,

as you can see I can access my EC2 instance directly

or I can access it, of course, through my load balancer.

But it may be preferable to only access my EC2 instance

through my load balancer.

So how do we do this?

Well under instances, let's go for Security Groups,

so right here.

And we're going to look at

the launch-wizard-1 security group.

And in here for the inbound rules, we're going to edit them

and we're going to look at the HTTP rule.

Right now we allow everything from everywhere

on this security group.

But what we wanna say is that no, the only traffic allowed

into our EC2 instance should be traffic

coming from the load balancer.

So how do we change this?

Well, let's first delete this rule.

You have to first delete it and then you add a new rule.

And so again, we want HTTP.

But this time instead of having a CIDR block,

you can scroll down and you can see

that you can have security groups in there.

So the security group we want to allow in

is the security group of my load balancer.

So if you just type load as well

is going to filter the list.

So then you select the security group of the load balancer.

And the effect of this is that if we save this role

and have a look at it,

now if we have a look at our EC2 instance directly

and I refresh this page, as you can see it's timing out

because it's like not being able to access the instance

because I'm not allowed to access directly the instance.

But if you refresh the load balancer,

well the load balancer can still access my instances

because in the rule that we have created

in our security group, we allow inbound coming from,

if you have a look at here,

we allow inbound coming from the security group

of the application balancer.

So here we have tightened network security.

The second thing I want to show you

is around application balancer rules.

So currently if you go into this ALB right here,

and we go under listeners and I click on it.

So as you can see I have my listener right here.

There are some details over it and then I scroll down

and we have the rules, listener rules.

So here we can add some rules.

So we have the default over now which is saying that,

"Hey, for every request, send it to my demo target group

for my ALB."

But we can add rules and make it as complex as we want.

So this one is going to be a DemoRule,

that's the name I want to give it.

And next we need to add conditions.

So conditions is what do we want to filter

in terms of requests for this role?

So do we want to look at host headers or, for example,

have a look at, for example,

if we are on the star.example.com or myapp.example.com

or whatever you want.

Path is for the path.

So we'll use /error and saying,

"Okay if in the path we have /error

then this rule should come in."

We can also have the HTTP request method to be get

or post whatever you want.

You can filter and condition based on the source IP

and then you can have query string and HTTP header as well.

So, quite a lot of different possibilities

but for now I'm going to use path

and the path is going to be /error.

Okay, confirm.

So we can add multiple conditions if we wanted to.

Right now in the rules limit you can see

the types of limits you can have.

So let's click on Next.

We have one condition, that's enough.

And then what is the action?

So once we match on the condition,

what do we want to do with it?

Do we want to forward to specific target groups?

For example, if you had more than one target group

then we could define one or more applications

based on path or based on host domain.

Or we can redirect to a specific URL, for example,

with a URI parts or full URL on the protocol HTTP or HTTPS,

and then a specific status code.

And then as well customize the host, the path,

and the query.

Or we can return a fixed response,

and this is the one I'm going to do right now.

So we can say, "Hey, 404, it's not found.

So not found, custom error."

So this is the what we're going to return

when we go to /error.

You'll see in a second that will make more sense to you.

Then what is the priority of this rule?

So right now it is pending.

And so we have rules

and we can have maybe a hundred rules in here.

So we can define priorities

and the one is going to be the highest priority,

five is going to be a bit lower, up to 50,000.

So, of course based on like, for example,

if a condition is matched by multiple rule

is the rule with the highest priority, that will win.

So we're going to use priority of five

just to give it as an example.

And now we can see both our listener rules.

Let's click on Next.

Everything looks good for this demo rule

and it has been created.

So we can see now we have two rules,

the default rule and the demo rule.

And they're here

and you can add more rules if you wanted to.

Now let's test it out.

So if I go into my load balancer detail,

look at the DNS name, copy it and add /error,

then this is going to trigger my rule

and the result is not found, custom error.

Which means that yes, indeed, this request was matching

the path pattern of /error and so therefore 404

and text plain was returned.

So, okay, that's it.

I hope you liked it and I will see you in the next lecture.